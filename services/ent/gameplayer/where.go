// Code generated by ent, DO NOT EDIT.

package gameplayer

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRate), v))
	})
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.GamePlayer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRate), v...))
	})
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.GamePlayer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRate), v...))
	})
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRate), v))
	})
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRate), v))
	})
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRate), v))
	})
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRate), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GamePlayer) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GamePlayer) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GamePlayer) predicate.GamePlayer {
	return predicate.GamePlayer(func(s *sql.Selector) {
		p(s.Not())
	})
}
