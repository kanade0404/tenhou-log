// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// MJLogFileDelete is the builder for deleting a MJLogFile entity.
type MJLogFileDelete struct {
	config
	hooks    []Hook
	mutation *MJLogFileMutation
}

// Where appends a list predicates to the MJLogFileDelete builder.
func (mlfd *MJLogFileDelete) Where(ps ...predicate.MJLogFile) *MJLogFileDelete {
	mlfd.mutation.Where(ps...)
	return mlfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mlfd *MJLogFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MJLogFileMutation](ctx, mlfd.sqlExec, mlfd.mutation, mlfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfd *MJLogFileDelete) ExecX(ctx context.Context) int {
	n, err := mlfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mlfd *MJLogFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: mjlogfile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlogfile.FieldID,
			},
		},
	}
	if ps := mlfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mlfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mlfd.mutation.done = true
	return affected, err
}

// MJLogFileDeleteOne is the builder for deleting a single MJLogFile entity.
type MJLogFileDeleteOne struct {
	mlfd *MJLogFileDelete
}

// Exec executes the deletion query.
func (mlfdo *MJLogFileDeleteOne) Exec(ctx context.Context) error {
	n, err := mlfdo.mlfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mjlogfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfdo *MJLogFileDeleteOne) ExecX(ctx context.Context) {
	mlfdo.mlfd.ExecX(ctx)
}
