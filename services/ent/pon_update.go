// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/pon"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// PonUpdate is the builder for updating Pon entities.
type PonUpdate struct {
	config
	hooks    []Hook
	mutation *PonMutation
}

// Where appends a list predicates to the PonUpdate builder.
func (pu *PonUpdate) Where(ps ...predicate.Pon) *PonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (pu *PonUpdate) SetCallID(id uuid.UUID) *PonUpdate {
	pu.mutation.SetCallID(id)
	return pu
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (pu *PonUpdate) SetNillableCallID(id *uuid.UUID) *PonUpdate {
	if id != nil {
		pu = pu.SetCallID(*id)
	}
	return pu
}

// SetCall sets the "call" edge to the Call entity.
func (pu *PonUpdate) SetCall(c *Call) *PonUpdate {
	return pu.SetCallID(c.ID)
}

// Mutation returns the PonMutation object of the builder.
func (pu *PonUpdate) Mutation() *PonMutation {
	return pu.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (pu *PonUpdate) ClearCall() *PonUpdate {
	pu.mutation.ClearCall()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PonMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pon.Table,
			Columns: pon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pon.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pon.CallTable,
			Columns: []string{pon.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pon.CallTable,
			Columns: []string{pon.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PonUpdateOne is the builder for updating a single Pon entity.
type PonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PonMutation
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (puo *PonUpdateOne) SetCallID(id uuid.UUID) *PonUpdateOne {
	puo.mutation.SetCallID(id)
	return puo
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (puo *PonUpdateOne) SetNillableCallID(id *uuid.UUID) *PonUpdateOne {
	if id != nil {
		puo = puo.SetCallID(*id)
	}
	return puo
}

// SetCall sets the "call" edge to the Call entity.
func (puo *PonUpdateOne) SetCall(c *Call) *PonUpdateOne {
	return puo.SetCallID(c.ID)
}

// Mutation returns the PonMutation object of the builder.
func (puo *PonUpdateOne) Mutation() *PonMutation {
	return puo.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (puo *PonUpdateOne) ClearCall() *PonUpdateOne {
	puo.mutation.ClearCall()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PonUpdateOne) Select(field string, fields ...string) *PonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pon entity.
func (puo *PonUpdateOne) Save(ctx context.Context) (*Pon, error) {
	return withHooks[*Pon, PonMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PonUpdateOne) SaveX(ctx context.Context) *Pon {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PonUpdateOne) sqlSave(ctx context.Context) (_node *Pon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pon.Table,
			Columns: pon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pon.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pon.FieldID)
		for _, f := range fields {
			if !pon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pon.CallTable,
			Columns: []string{pon.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pon.CallTable,
			Columns: []string{pon.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pon{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
