// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/dan"
)

// Dan is the model entity for the Dan schema.
type Dan struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DanQuery when eager-loading is set.
	Edges DanEdges `json:"edges"`
}

// DanEdges holds the relations/edges for other nodes in the graph.
type DanEdges struct {
	// GamePlayers holds the value of the game_players edge.
	GamePlayers []*GamePlayer `json:"game_players,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GamePlayersOrErr returns the GamePlayers value or an error if the edge
// was not loaded in eager-loading.
func (e DanEdges) GamePlayersOrErr() ([]*GamePlayer, error) {
	if e.loadedTypes[0] {
		return e.GamePlayers, nil
	}
	return nil, &NotLoadedError{edge: "game_players"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dan.FieldName:
			values[i] = new(sql.NullString)
		case dan.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dan fields.
func (d *Dan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dan.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case dan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		}
	}
	return nil
}

// QueryGamePlayers queries the "game_players" edge of the Dan entity.
func (d *Dan) QueryGamePlayers() *GamePlayerQuery {
	return NewDanClient(d.config).QueryGamePlayers(d)
}

// Update returns a builder for updating this Dan.
// Note that you need to call Dan.Unwrap() before calling this method if this Dan
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dan) Update() *DanUpdateOne {
	return NewDanClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dan) Unwrap() *Dan {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dan is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dan) String() string {
	var builder strings.Builder
	builder.WriteString("Dan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Dans is a parsable slice of Dan.
type Dans []*Dan
