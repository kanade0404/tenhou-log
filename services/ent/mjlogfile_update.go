// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// MJLogFileUpdate is the builder for updating MJLogFile entities.
type MJLogFileUpdate struct {
	config
	hooks    []Hook
	mutation *MJLogFileMutation
}

// Where appends a list predicates to the MJLogFileUpdate builder.
func (mlfu *MJLogFileUpdate) Where(ps ...predicate.MJLogFile) *MJLogFileUpdate {
	mlfu.mutation.Where(ps...)
	return mlfu
}

// SetCompressedMjlogFilesID sets the "compressed_mjlog_files" edge to the CompressedMJLog entity by ID.
func (mlfu *MJLogFileUpdate) SetCompressedMjlogFilesID(id uuid.UUID) *MJLogFileUpdate {
	mlfu.mutation.SetCompressedMjlogFilesID(id)
	return mlfu
}

// SetCompressedMjlogFiles sets the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfu *MJLogFileUpdate) SetCompressedMjlogFiles(c *CompressedMJLog) *MJLogFileUpdate {
	return mlfu.SetCompressedMjlogFilesID(c.ID)
}

// SetMjlogsID sets the "mjlogs" edge to the MJLog entity by ID.
func (mlfu *MJLogFileUpdate) SetMjlogsID(id uuid.UUID) *MJLogFileUpdate {
	mlfu.mutation.SetMjlogsID(id)
	return mlfu
}

// SetNillableMjlogsID sets the "mjlogs" edge to the MJLog entity by ID if the given value is not nil.
func (mlfu *MJLogFileUpdate) SetNillableMjlogsID(id *uuid.UUID) *MJLogFileUpdate {
	if id != nil {
		mlfu = mlfu.SetMjlogsID(*id)
	}
	return mlfu
}

// SetMjlogs sets the "mjlogs" edge to the MJLog entity.
func (mlfu *MJLogFileUpdate) SetMjlogs(m *MJLog) *MJLogFileUpdate {
	return mlfu.SetMjlogsID(m.ID)
}

// Mutation returns the MJLogFileMutation object of the builder.
func (mlfu *MJLogFileUpdate) Mutation() *MJLogFileMutation {
	return mlfu.mutation
}

// ClearCompressedMjlogFiles clears the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfu *MJLogFileUpdate) ClearCompressedMjlogFiles() *MJLogFileUpdate {
	mlfu.mutation.ClearCompressedMjlogFiles()
	return mlfu
}

// ClearMjlogs clears the "mjlogs" edge to the MJLog entity.
func (mlfu *MJLogFileUpdate) ClearMjlogs() *MJLogFileUpdate {
	mlfu.mutation.ClearMjlogs()
	return mlfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlfu *MJLogFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MJLogFileMutation](ctx, mlfu.sqlSave, mlfu.mutation, mlfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlfu *MJLogFileUpdate) SaveX(ctx context.Context) int {
	affected, err := mlfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlfu *MJLogFileUpdate) Exec(ctx context.Context) error {
	_, err := mlfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfu *MJLogFileUpdate) ExecX(ctx context.Context) {
	if err := mlfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlfu *MJLogFileUpdate) check() error {
	if _, ok := mlfu.mutation.CompressedMjlogFilesID(); mlfu.mutation.CompressedMjlogFilesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MJLogFile.compressed_mjlog_files"`)
	}
	return nil
}

func (mlfu *MJLogFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mlfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mjlogfile.Table, mjlogfile.Columns, sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID))
	if ps := mlfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mlfu.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlogfile.CompressedMjlogFilesTable,
			Columns: []string{mjlogfile.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compressedmjlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfu.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlogfile.CompressedMjlogFilesTable,
			Columns: []string{mjlogfile.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compressedmjlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlfu.mutation.MjlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfile.MjlogsTable,
			Columns: []string{mjlogfile.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfu.mutation.MjlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfile.MjlogsTable,
			Columns: []string{mjlogfile.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlogfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlfu.mutation.done = true
	return n, nil
}

// MJLogFileUpdateOne is the builder for updating a single MJLogFile entity.
type MJLogFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MJLogFileMutation
}

// SetCompressedMjlogFilesID sets the "compressed_mjlog_files" edge to the CompressedMJLog entity by ID.
func (mlfuo *MJLogFileUpdateOne) SetCompressedMjlogFilesID(id uuid.UUID) *MJLogFileUpdateOne {
	mlfuo.mutation.SetCompressedMjlogFilesID(id)
	return mlfuo
}

// SetCompressedMjlogFiles sets the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfuo *MJLogFileUpdateOne) SetCompressedMjlogFiles(c *CompressedMJLog) *MJLogFileUpdateOne {
	return mlfuo.SetCompressedMjlogFilesID(c.ID)
}

// SetMjlogsID sets the "mjlogs" edge to the MJLog entity by ID.
func (mlfuo *MJLogFileUpdateOne) SetMjlogsID(id uuid.UUID) *MJLogFileUpdateOne {
	mlfuo.mutation.SetMjlogsID(id)
	return mlfuo
}

// SetNillableMjlogsID sets the "mjlogs" edge to the MJLog entity by ID if the given value is not nil.
func (mlfuo *MJLogFileUpdateOne) SetNillableMjlogsID(id *uuid.UUID) *MJLogFileUpdateOne {
	if id != nil {
		mlfuo = mlfuo.SetMjlogsID(*id)
	}
	return mlfuo
}

// SetMjlogs sets the "mjlogs" edge to the MJLog entity.
func (mlfuo *MJLogFileUpdateOne) SetMjlogs(m *MJLog) *MJLogFileUpdateOne {
	return mlfuo.SetMjlogsID(m.ID)
}

// Mutation returns the MJLogFileMutation object of the builder.
func (mlfuo *MJLogFileUpdateOne) Mutation() *MJLogFileMutation {
	return mlfuo.mutation
}

// ClearCompressedMjlogFiles clears the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfuo *MJLogFileUpdateOne) ClearCompressedMjlogFiles() *MJLogFileUpdateOne {
	mlfuo.mutation.ClearCompressedMjlogFiles()
	return mlfuo
}

// ClearMjlogs clears the "mjlogs" edge to the MJLog entity.
func (mlfuo *MJLogFileUpdateOne) ClearMjlogs() *MJLogFileUpdateOne {
	mlfuo.mutation.ClearMjlogs()
	return mlfuo
}

// Where appends a list predicates to the MJLogFileUpdate builder.
func (mlfuo *MJLogFileUpdateOne) Where(ps ...predicate.MJLogFile) *MJLogFileUpdateOne {
	mlfuo.mutation.Where(ps...)
	return mlfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mlfuo *MJLogFileUpdateOne) Select(field string, fields ...string) *MJLogFileUpdateOne {
	mlfuo.fields = append([]string{field}, fields...)
	return mlfuo
}

// Save executes the query and returns the updated MJLogFile entity.
func (mlfuo *MJLogFileUpdateOne) Save(ctx context.Context) (*MJLogFile, error) {
	return withHooks[*MJLogFile, MJLogFileMutation](ctx, mlfuo.sqlSave, mlfuo.mutation, mlfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlfuo *MJLogFileUpdateOne) SaveX(ctx context.Context) *MJLogFile {
	node, err := mlfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mlfuo *MJLogFileUpdateOne) Exec(ctx context.Context) error {
	_, err := mlfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfuo *MJLogFileUpdateOne) ExecX(ctx context.Context) {
	if err := mlfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlfuo *MJLogFileUpdateOne) check() error {
	if _, ok := mlfuo.mutation.CompressedMjlogFilesID(); mlfuo.mutation.CompressedMjlogFilesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MJLogFile.compressed_mjlog_files"`)
	}
	return nil
}

func (mlfuo *MJLogFileUpdateOne) sqlSave(ctx context.Context) (_node *MJLogFile, err error) {
	if err := mlfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mjlogfile.Table, mjlogfile.Columns, sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID))
	id, ok := mlfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MJLogFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mlfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mjlogfile.FieldID)
		for _, f := range fields {
			if !mjlogfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mjlogfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mlfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mlfuo.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlogfile.CompressedMjlogFilesTable,
			Columns: []string{mjlogfile.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compressedmjlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfuo.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlogfile.CompressedMjlogFilesTable,
			Columns: []string{mjlogfile.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compressedmjlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlfuo.mutation.MjlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfile.MjlogsTable,
			Columns: []string{mjlogfile.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfuo.mutation.MjlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfile.MjlogsTable,
			Columns: []string{mjlogfile.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MJLogFile{config: mlfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mlfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlogfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mlfuo.mutation.done = true
	return _node, nil
}
