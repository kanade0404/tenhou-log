// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/game"
	"github.com/kanade0404/tenhou-log/services/ent/round"
	"github.com/kanade0404/tenhou-log/services/ent/wind"
)

// Round is the model entity for the Round schema.
type Round struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoundQuery when eager-loading is set.
	Edges       RoundEdges `json:"edges"`
	game_rounds *uuid.UUID
	wind_rounds *uuid.UUID
}

// RoundEdges holds the relations/edges for other nodes in the graph.
type RoundEdges struct {
	// Games holds the value of the games edge.
	Games *Game `json:"games,omitempty"`
	// Winds holds the value of the winds edge.
	Winds *Wind `json:"winds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoundEdges) GamesOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Games == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// WindsOrErr returns the Winds value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoundEdges) WindsOrErr() (*Wind, error) {
	if e.loadedTypes[1] {
		if e.Winds == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: wind.Label}
		}
		return e.Winds, nil
	}
	return nil, &NotLoadedError{edge: "winds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Round) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case round.FieldID:
			values[i] = new(uuid.UUID)
		case round.ForeignKeys[0]: // game_rounds
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case round.ForeignKeys[1]: // wind_rounds
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Round", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Round fields.
func (r *Round) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case round.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case round.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field game_rounds", values[i])
			} else if value.Valid {
				r.game_rounds = new(uuid.UUID)
				*r.game_rounds = *value.S.(*uuid.UUID)
			}
		case round.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field wind_rounds", values[i])
			} else if value.Valid {
				r.wind_rounds = new(uuid.UUID)
				*r.wind_rounds = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryGames queries the "games" edge of the Round entity.
func (r *Round) QueryGames() *GameQuery {
	return (&RoundClient{config: r.config}).QueryGames(r)
}

// QueryWinds queries the "winds" edge of the Round entity.
func (r *Round) QueryWinds() *WindQuery {
	return (&RoundClient{config: r.config}).QueryWinds(r)
}

// Update returns a builder for updating this Round.
// Note that you need to call Round.Unwrap() before calling this method if this Round
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Round) Update() *RoundUpdateOne {
	return (&RoundClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Round entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Round) Unwrap() *Round {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Round is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Round) String() string {
	var builder strings.Builder
	builder.WriteString("Round(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Rounds is a parsable slice of Round.
type Rounds []*Round

func (r Rounds) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
