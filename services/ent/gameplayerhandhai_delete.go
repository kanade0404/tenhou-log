// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// GamePlayerHandHaiDelete is the builder for deleting a GamePlayerHandHai entity.
type GamePlayerHandHaiDelete struct {
	config
	hooks    []Hook
	mutation *GamePlayerHandHaiMutation
}

// Where appends a list predicates to the GamePlayerHandHaiDelete builder.
func (gphhd *GamePlayerHandHaiDelete) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiDelete {
	gphhd.mutation.Where(ps...)
	return gphhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gphhd *GamePlayerHandHaiDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, GamePlayerHandHaiMutation](ctx, gphhd.sqlExec, gphhd.mutation, gphhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhd *GamePlayerHandHaiDelete) ExecX(ctx context.Context) int {
	n, err := gphhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gphhd *GamePlayerHandHaiDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gameplayerhandhai.Table, sqlgraph.NewFieldSpec(gameplayerhandhai.FieldID, field.TypeUUID))
	if ps := gphhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gphhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gphhd.mutation.done = true
	return affected, err
}

// GamePlayerHandHaiDeleteOne is the builder for deleting a single GamePlayerHandHai entity.
type GamePlayerHandHaiDeleteOne struct {
	gphhd *GamePlayerHandHaiDelete
}

// Where appends a list predicates to the GamePlayerHandHaiDelete builder.
func (gphhdo *GamePlayerHandHaiDeleteOne) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiDeleteOne {
	gphhdo.gphhd.mutation.Where(ps...)
	return gphhdo
}

// Exec executes the deletion query.
func (gphhdo *GamePlayerHandHaiDeleteOne) Exec(ctx context.Context) error {
	n, err := gphhdo.gphhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gameplayerhandhai.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhdo *GamePlayerHandHaiDeleteOne) ExecX(ctx context.Context) {
	if err := gphhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
