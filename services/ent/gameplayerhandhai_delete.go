// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// GamePlayerHandHaiDelete is the builder for deleting a GamePlayerHandHai entity.
type GamePlayerHandHaiDelete struct {
	config
	hooks    []Hook
	mutation *GamePlayerHandHaiMutation
}

// Where appends a list predicates to the GamePlayerHandHaiDelete builder.
func (gphhd *GamePlayerHandHaiDelete) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiDelete {
	gphhd.mutation.Where(ps...)
	return gphhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gphhd *GamePlayerHandHaiDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gphhd.hooks) == 0 {
		affected, err = gphhd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GamePlayerHandHaiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gphhd.mutation = mutation
			affected, err = gphhd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gphhd.hooks) - 1; i >= 0; i-- {
			if gphhd.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gphhd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gphhd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhd *GamePlayerHandHaiDelete) ExecX(ctx context.Context) int {
	n, err := gphhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gphhd *GamePlayerHandHaiDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: gameplayerhandhai.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gameplayerhandhai.FieldID,
			},
		},
	}
	if ps := gphhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gphhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	return affected, err
}

// GamePlayerHandHaiDeleteOne is the builder for deleting a single GamePlayerHandHai entity.
type GamePlayerHandHaiDeleteOne struct {
	gphhd *GamePlayerHandHaiDelete
}

// Exec executes the deletion query.
func (gphhdo *GamePlayerHandHaiDeleteOne) Exec(ctx context.Context) error {
	n, err := gphhdo.gphhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gameplayerhandhai.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhdo *GamePlayerHandHaiDeleteOne) ExecX(ctx context.Context) {
	gphhdo.gphhd.ExecX(ctx)
}
