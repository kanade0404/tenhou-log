// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/discard"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/reach"
)

// ReachUpdate is the builder for updating Reach entities.
type ReachUpdate struct {
	config
	hooks    []Hook
	mutation *ReachMutation
}

// Where appends a list predicates to the ReachUpdate builder.
func (ru *ReachUpdate) Where(ps ...predicate.Reach) *ReachUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ru *ReachUpdate) SetEventID(id uuid.UUID) *ReachUpdate {
	ru.mutation.SetEventID(id)
	return ru
}

// SetEvent sets the "event" edge to the Event entity.
func (ru *ReachUpdate) SetEvent(e *Event) *ReachUpdate {
	return ru.SetEventID(e.ID)
}

// SetDiscardID sets the "discard" edge to the Discard entity by ID.
func (ru *ReachUpdate) SetDiscardID(id uuid.UUID) *ReachUpdate {
	ru.mutation.SetDiscardID(id)
	return ru
}

// SetDiscard sets the "discard" edge to the Discard entity.
func (ru *ReachUpdate) SetDiscard(d *Discard) *ReachUpdate {
	return ru.SetDiscardID(d.ID)
}

// Mutation returns the ReachMutation object of the builder.
func (ru *ReachUpdate) Mutation() *ReachMutation {
	return ru.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ru *ReachUpdate) ClearEvent() *ReachUpdate {
	ru.mutation.ClearEvent()
	return ru
}

// ClearDiscard clears the "discard" edge to the Discard entity.
func (ru *ReachUpdate) ClearDiscard() *ReachUpdate {
	ru.mutation.ClearDiscard()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReachUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReachMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReachUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReachUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReachUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReachUpdate) check() error {
	if _, ok := ru.mutation.EventID(); ru.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reach.event"`)
	}
	if _, ok := ru.mutation.DiscardID(); ru.mutation.DiscardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reach.discard"`)
	}
	return nil
}

func (ru *ReachUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reach.Table,
			Columns: reach.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reach.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reach.EventTable,
			Columns: []string{reach.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reach.EventTable,
			Columns: []string{reach.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DiscardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reach.DiscardTable,
			Columns: []string{reach.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DiscardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reach.DiscardTable,
			Columns: []string{reach.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reach.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReachUpdateOne is the builder for updating a single Reach entity.
type ReachUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReachMutation
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ruo *ReachUpdateOne) SetEventID(id uuid.UUID) *ReachUpdateOne {
	ruo.mutation.SetEventID(id)
	return ruo
}

// SetEvent sets the "event" edge to the Event entity.
func (ruo *ReachUpdateOne) SetEvent(e *Event) *ReachUpdateOne {
	return ruo.SetEventID(e.ID)
}

// SetDiscardID sets the "discard" edge to the Discard entity by ID.
func (ruo *ReachUpdateOne) SetDiscardID(id uuid.UUID) *ReachUpdateOne {
	ruo.mutation.SetDiscardID(id)
	return ruo
}

// SetDiscard sets the "discard" edge to the Discard entity.
func (ruo *ReachUpdateOne) SetDiscard(d *Discard) *ReachUpdateOne {
	return ruo.SetDiscardID(d.ID)
}

// Mutation returns the ReachMutation object of the builder.
func (ruo *ReachUpdateOne) Mutation() *ReachMutation {
	return ruo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ruo *ReachUpdateOne) ClearEvent() *ReachUpdateOne {
	ruo.mutation.ClearEvent()
	return ruo
}

// ClearDiscard clears the "discard" edge to the Discard entity.
func (ruo *ReachUpdateOne) ClearDiscard() *ReachUpdateOne {
	ruo.mutation.ClearDiscard()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReachUpdateOne) Select(field string, fields ...string) *ReachUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reach entity.
func (ruo *ReachUpdateOne) Save(ctx context.Context) (*Reach, error) {
	return withHooks[*Reach, ReachMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReachUpdateOne) SaveX(ctx context.Context) *Reach {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReachUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReachUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReachUpdateOne) check() error {
	if _, ok := ruo.mutation.EventID(); ruo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reach.event"`)
	}
	if _, ok := ruo.mutation.DiscardID(); ruo.mutation.DiscardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reach.discard"`)
	}
	return nil
}

func (ruo *ReachUpdateOne) sqlSave(ctx context.Context) (_node *Reach, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reach.Table,
			Columns: reach.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reach.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reach.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reach.FieldID)
		for _, f := range fields {
			if !reach.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reach.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reach.EventTable,
			Columns: []string{reach.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reach.EventTable,
			Columns: []string{reach.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DiscardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reach.DiscardTable,
			Columns: []string{reach.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DiscardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reach.DiscardTable,
			Columns: []string{reach.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reach{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reach.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
