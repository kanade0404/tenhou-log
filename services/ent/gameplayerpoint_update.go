// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerpoint"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// GamePlayerPointUpdate is the builder for updating GamePlayerPoint entities.
type GamePlayerPointUpdate struct {
	config
	hooks    []Hook
	mutation *GamePlayerPointMutation
}

// Where appends a list predicates to the GamePlayerPointUpdate builder.
func (gppu *GamePlayerPointUpdate) Where(ps ...predicate.GamePlayerPoint) *GamePlayerPointUpdate {
	gppu.mutation.Where(ps...)
	return gppu
}

// AddTurnIDs adds the "turns" edge to the Turn entity by IDs.
func (gppu *GamePlayerPointUpdate) AddTurnIDs(ids ...uuid.UUID) *GamePlayerPointUpdate {
	gppu.mutation.AddTurnIDs(ids...)
	return gppu
}

// AddTurns adds the "turns" edges to the Turn entity.
func (gppu *GamePlayerPointUpdate) AddTurns(t ...*Turn) *GamePlayerPointUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gppu.AddTurnIDs(ids...)
}

// Mutation returns the GamePlayerPointMutation object of the builder.
func (gppu *GamePlayerPointUpdate) Mutation() *GamePlayerPointMutation {
	return gppu.mutation
}

// ClearTurns clears all "turns" edges to the Turn entity.
func (gppu *GamePlayerPointUpdate) ClearTurns() *GamePlayerPointUpdate {
	gppu.mutation.ClearTurns()
	return gppu
}

// RemoveTurnIDs removes the "turns" edge to Turn entities by IDs.
func (gppu *GamePlayerPointUpdate) RemoveTurnIDs(ids ...uuid.UUID) *GamePlayerPointUpdate {
	gppu.mutation.RemoveTurnIDs(ids...)
	return gppu
}

// RemoveTurns removes "turns" edges to Turn entities.
func (gppu *GamePlayerPointUpdate) RemoveTurns(t ...*Turn) *GamePlayerPointUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gppu.RemoveTurnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gppu *GamePlayerPointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gppu.hooks) == 0 {
		affected, err = gppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GamePlayerPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gppu.mutation = mutation
			affected, err = gppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gppu.hooks) - 1; i >= 0; i-- {
			if gppu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gppu *GamePlayerPointUpdate) SaveX(ctx context.Context) int {
	affected, err := gppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gppu *GamePlayerPointUpdate) Exec(ctx context.Context) error {
	_, err := gppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gppu *GamePlayerPointUpdate) ExecX(ctx context.Context) {
	if err := gppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gppu *GamePlayerPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameplayerpoint.Table,
			Columns: gameplayerpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gameplayerpoint.FieldID,
			},
		},
	}
	if ps := gppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gppu.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gppu.mutation.RemovedTurnsIDs(); len(nodes) > 0 && !gppu.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gppu.mutation.TurnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayerpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GamePlayerPointUpdateOne is the builder for updating a single GamePlayerPoint entity.
type GamePlayerPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GamePlayerPointMutation
}

// AddTurnIDs adds the "turns" edge to the Turn entity by IDs.
func (gppuo *GamePlayerPointUpdateOne) AddTurnIDs(ids ...uuid.UUID) *GamePlayerPointUpdateOne {
	gppuo.mutation.AddTurnIDs(ids...)
	return gppuo
}

// AddTurns adds the "turns" edges to the Turn entity.
func (gppuo *GamePlayerPointUpdateOne) AddTurns(t ...*Turn) *GamePlayerPointUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gppuo.AddTurnIDs(ids...)
}

// Mutation returns the GamePlayerPointMutation object of the builder.
func (gppuo *GamePlayerPointUpdateOne) Mutation() *GamePlayerPointMutation {
	return gppuo.mutation
}

// ClearTurns clears all "turns" edges to the Turn entity.
func (gppuo *GamePlayerPointUpdateOne) ClearTurns() *GamePlayerPointUpdateOne {
	gppuo.mutation.ClearTurns()
	return gppuo
}

// RemoveTurnIDs removes the "turns" edge to Turn entities by IDs.
func (gppuo *GamePlayerPointUpdateOne) RemoveTurnIDs(ids ...uuid.UUID) *GamePlayerPointUpdateOne {
	gppuo.mutation.RemoveTurnIDs(ids...)
	return gppuo
}

// RemoveTurns removes "turns" edges to Turn entities.
func (gppuo *GamePlayerPointUpdateOne) RemoveTurns(t ...*Turn) *GamePlayerPointUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gppuo.RemoveTurnIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gppuo *GamePlayerPointUpdateOne) Select(field string, fields ...string) *GamePlayerPointUpdateOne {
	gppuo.fields = append([]string{field}, fields...)
	return gppuo
}

// Save executes the query and returns the updated GamePlayerPoint entity.
func (gppuo *GamePlayerPointUpdateOne) Save(ctx context.Context) (*GamePlayerPoint, error) {
	var (
		err  error
		node *GamePlayerPoint
	)
	if len(gppuo.hooks) == 0 {
		node, err = gppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GamePlayerPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gppuo.mutation = mutation
			node, err = gppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gppuo.hooks) - 1; i >= 0; i-- {
			if gppuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gppuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gppuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GamePlayerPoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GamePlayerPointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gppuo *GamePlayerPointUpdateOne) SaveX(ctx context.Context) *GamePlayerPoint {
	node, err := gppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gppuo *GamePlayerPointUpdateOne) Exec(ctx context.Context) error {
	_, err := gppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gppuo *GamePlayerPointUpdateOne) ExecX(ctx context.Context) {
	if err := gppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gppuo *GamePlayerPointUpdateOne) sqlSave(ctx context.Context) (_node *GamePlayerPoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameplayerpoint.Table,
			Columns: gameplayerpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gameplayerpoint.FieldID,
			},
		},
	}
	id, ok := gppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GamePlayerPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayerpoint.FieldID)
		for _, f := range fields {
			if !gameplayerpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameplayerpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gppuo.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gppuo.mutation.RemovedTurnsIDs(); len(nodes) > 0 && !gppuo.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gppuo.mutation.TurnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayerpoint.TurnsTable,
			Columns: gameplayerpoint.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GamePlayerPoint{config: gppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayerpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
