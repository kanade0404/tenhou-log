// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/discard"
	"github.com/kanade0404/tenhou-log/services/ent/drawn"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// DrawnUpdate is the builder for updating Drawn entities.
type DrawnUpdate struct {
	config
	hooks    []Hook
	mutation *DrawnMutation
}

// Where appends a list predicates to the DrawnUpdate builder.
func (du *DrawnUpdate) Where(ps ...predicate.Drawn) *DrawnUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (du *DrawnUpdate) SetEventID(id uuid.UUID) *DrawnUpdate {
	du.mutation.SetEventID(id)
	return du
}

// SetEvent sets the "event" edge to the Event entity.
func (du *DrawnUpdate) SetEvent(e *Event) *DrawnUpdate {
	return du.SetEventID(e.ID)
}

// SetDiscardID sets the "discard" edge to the Discard entity by ID.
func (du *DrawnUpdate) SetDiscardID(id uuid.UUID) *DrawnUpdate {
	du.mutation.SetDiscardID(id)
	return du
}

// SetDiscard sets the "discard" edge to the Discard entity.
func (du *DrawnUpdate) SetDiscard(d *Discard) *DrawnUpdate {
	return du.SetDiscardID(d.ID)
}

// Mutation returns the DrawnMutation object of the builder.
func (du *DrawnUpdate) Mutation() *DrawnMutation {
	return du.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (du *DrawnUpdate) ClearEvent() *DrawnUpdate {
	du.mutation.ClearEvent()
	return du
}

// ClearDiscard clears the "discard" edge to the Discard entity.
func (du *DrawnUpdate) ClearDiscard() *DrawnUpdate {
	du.mutation.ClearDiscard()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DrawnUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrawnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DrawnUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DrawnUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DrawnUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DrawnUpdate) check() error {
	if _, ok := du.mutation.EventID(); du.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Drawn.event"`)
	}
	if _, ok := du.mutation.DiscardID(); du.mutation.DiscardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Drawn.discard"`)
	}
	return nil
}

func (du *DrawnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drawn.Table,
			Columns: drawn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: drawn.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drawn.EventTable,
			Columns: []string{drawn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drawn.EventTable,
			Columns: []string{drawn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DiscardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   drawn.DiscardTable,
			Columns: []string{drawn.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiscardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   drawn.DiscardTable,
			Columns: []string{drawn.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drawn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DrawnUpdateOne is the builder for updating a single Drawn entity.
type DrawnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DrawnMutation
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (duo *DrawnUpdateOne) SetEventID(id uuid.UUID) *DrawnUpdateOne {
	duo.mutation.SetEventID(id)
	return duo
}

// SetEvent sets the "event" edge to the Event entity.
func (duo *DrawnUpdateOne) SetEvent(e *Event) *DrawnUpdateOne {
	return duo.SetEventID(e.ID)
}

// SetDiscardID sets the "discard" edge to the Discard entity by ID.
func (duo *DrawnUpdateOne) SetDiscardID(id uuid.UUID) *DrawnUpdateOne {
	duo.mutation.SetDiscardID(id)
	return duo
}

// SetDiscard sets the "discard" edge to the Discard entity.
func (duo *DrawnUpdateOne) SetDiscard(d *Discard) *DrawnUpdateOne {
	return duo.SetDiscardID(d.ID)
}

// Mutation returns the DrawnMutation object of the builder.
func (duo *DrawnUpdateOne) Mutation() *DrawnMutation {
	return duo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (duo *DrawnUpdateOne) ClearEvent() *DrawnUpdateOne {
	duo.mutation.ClearEvent()
	return duo
}

// ClearDiscard clears the "discard" edge to the Discard entity.
func (duo *DrawnUpdateOne) ClearDiscard() *DrawnUpdateOne {
	duo.mutation.ClearDiscard()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DrawnUpdateOne) Select(field string, fields ...string) *DrawnUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Drawn entity.
func (duo *DrawnUpdateOne) Save(ctx context.Context) (*Drawn, error) {
	var (
		err  error
		node *Drawn
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrawnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Drawn)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DrawnMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DrawnUpdateOne) SaveX(ctx context.Context) *Drawn {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DrawnUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DrawnUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DrawnUpdateOne) check() error {
	if _, ok := duo.mutation.EventID(); duo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Drawn.event"`)
	}
	if _, ok := duo.mutation.DiscardID(); duo.mutation.DiscardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Drawn.discard"`)
	}
	return nil
}

func (duo *DrawnUpdateOne) sqlSave(ctx context.Context) (_node *Drawn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drawn.Table,
			Columns: drawn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: drawn.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Drawn.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, drawn.FieldID)
		for _, f := range fields {
			if !drawn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != drawn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drawn.EventTable,
			Columns: []string{drawn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drawn.EventTable,
			Columns: []string{drawn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DiscardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   drawn.DiscardTable,
			Columns: []string{drawn.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiscardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   drawn.DiscardTable,
			Columns: []string{drawn.DiscardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: discard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Drawn{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drawn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
