// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/game"
	"github.com/kanade0404/tenhou-log/services/ent/mjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// MJLogUpdate is the builder for updating MJLog entities.
type MJLogUpdate struct {
	config
	hooks    []Hook
	mutation *MJLogMutation
}

// Where appends a list predicates to the MJLogUpdate builder.
func (mlu *MJLogUpdate) Where(ps ...predicate.MJLog) *MJLogUpdate {
	mlu.mutation.Where(ps...)
	return mlu
}

// SetMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID.
func (mlu *MJLogUpdate) SetMjlogFilesID(id uuid.UUID) *MJLogUpdate {
	mlu.mutation.SetMjlogFilesID(id)
	return mlu
}

// SetNillableMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID if the given value is not nil.
func (mlu *MJLogUpdate) SetNillableMjlogFilesID(id *uuid.UUID) *MJLogUpdate {
	if id != nil {
		mlu = mlu.SetMjlogFilesID(*id)
	}
	return mlu
}

// SetMjlogFiles sets the "mjlog_files" edge to the MJLogFile entity.
func (mlu *MJLogUpdate) SetMjlogFiles(m *MJLogFile) *MJLogUpdate {
	return mlu.SetMjlogFilesID(m.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (mlu *MJLogUpdate) SetGamesID(id uuid.UUID) *MJLogUpdate {
	mlu.mutation.SetGamesID(id)
	return mlu
}

// SetGames sets the "games" edge to the Game entity.
func (mlu *MJLogUpdate) SetGames(g *Game) *MJLogUpdate {
	return mlu.SetGamesID(g.ID)
}

// Mutation returns the MJLogMutation object of the builder.
func (mlu *MJLogUpdate) Mutation() *MJLogMutation {
	return mlu.mutation
}

// ClearMjlogFiles clears the "mjlog_files" edge to the MJLogFile entity.
func (mlu *MJLogUpdate) ClearMjlogFiles() *MJLogUpdate {
	mlu.mutation.ClearMjlogFiles()
	return mlu
}

// ClearGames clears the "games" edge to the Game entity.
func (mlu *MJLogUpdate) ClearGames() *MJLogUpdate {
	mlu.mutation.ClearGames()
	return mlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlu *MJLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MJLogMutation](ctx, mlu.sqlSave, mlu.mutation, mlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlu *MJLogUpdate) SaveX(ctx context.Context) int {
	affected, err := mlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlu *MJLogUpdate) Exec(ctx context.Context) error {
	_, err := mlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlu *MJLogUpdate) ExecX(ctx context.Context) {
	if err := mlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlu *MJLogUpdate) check() error {
	if _, ok := mlu.mutation.GamesID(); mlu.mutation.GamesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MJLog.games"`)
	}
	return nil
}

func (mlu *MJLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mjlog.Table, mjlog.Columns, sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID))
	if ps := mlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mlu.mutation.MjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.MjlogFilesTable,
			Columns: []string{mjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.MjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.MjlogFilesTable,
			Columns: []string{mjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.GamesTable,
			Columns: []string{mjlog.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.GamesTable,
			Columns: []string{mjlog.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlu.mutation.done = true
	return n, nil
}

// MJLogUpdateOne is the builder for updating a single MJLog entity.
type MJLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MJLogMutation
}

// SetMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID.
func (mluo *MJLogUpdateOne) SetMjlogFilesID(id uuid.UUID) *MJLogUpdateOne {
	mluo.mutation.SetMjlogFilesID(id)
	return mluo
}

// SetNillableMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID if the given value is not nil.
func (mluo *MJLogUpdateOne) SetNillableMjlogFilesID(id *uuid.UUID) *MJLogUpdateOne {
	if id != nil {
		mluo = mluo.SetMjlogFilesID(*id)
	}
	return mluo
}

// SetMjlogFiles sets the "mjlog_files" edge to the MJLogFile entity.
func (mluo *MJLogUpdateOne) SetMjlogFiles(m *MJLogFile) *MJLogUpdateOne {
	return mluo.SetMjlogFilesID(m.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (mluo *MJLogUpdateOne) SetGamesID(id uuid.UUID) *MJLogUpdateOne {
	mluo.mutation.SetGamesID(id)
	return mluo
}

// SetGames sets the "games" edge to the Game entity.
func (mluo *MJLogUpdateOne) SetGames(g *Game) *MJLogUpdateOne {
	return mluo.SetGamesID(g.ID)
}

// Mutation returns the MJLogMutation object of the builder.
func (mluo *MJLogUpdateOne) Mutation() *MJLogMutation {
	return mluo.mutation
}

// ClearMjlogFiles clears the "mjlog_files" edge to the MJLogFile entity.
func (mluo *MJLogUpdateOne) ClearMjlogFiles() *MJLogUpdateOne {
	mluo.mutation.ClearMjlogFiles()
	return mluo
}

// ClearGames clears the "games" edge to the Game entity.
func (mluo *MJLogUpdateOne) ClearGames() *MJLogUpdateOne {
	mluo.mutation.ClearGames()
	return mluo
}

// Where appends a list predicates to the MJLogUpdate builder.
func (mluo *MJLogUpdateOne) Where(ps ...predicate.MJLog) *MJLogUpdateOne {
	mluo.mutation.Where(ps...)
	return mluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mluo *MJLogUpdateOne) Select(field string, fields ...string) *MJLogUpdateOne {
	mluo.fields = append([]string{field}, fields...)
	return mluo
}

// Save executes the query and returns the updated MJLog entity.
func (mluo *MJLogUpdateOne) Save(ctx context.Context) (*MJLog, error) {
	return withHooks[*MJLog, MJLogMutation](ctx, mluo.sqlSave, mluo.mutation, mluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mluo *MJLogUpdateOne) SaveX(ctx context.Context) *MJLog {
	node, err := mluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mluo *MJLogUpdateOne) Exec(ctx context.Context) error {
	_, err := mluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mluo *MJLogUpdateOne) ExecX(ctx context.Context) {
	if err := mluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mluo *MJLogUpdateOne) check() error {
	if _, ok := mluo.mutation.GamesID(); mluo.mutation.GamesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MJLog.games"`)
	}
	return nil
}

func (mluo *MJLogUpdateOne) sqlSave(ctx context.Context) (_node *MJLog, err error) {
	if err := mluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mjlog.Table, mjlog.Columns, sqlgraph.NewFieldSpec(mjlog.FieldID, field.TypeUUID))
	id, ok := mluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MJLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mjlog.FieldID)
		for _, f := range fields {
			if !mjlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mjlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mluo.mutation.MjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.MjlogFilesTable,
			Columns: []string{mjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.MjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.MjlogFilesTable,
			Columns: []string{mjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mjlogfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mluo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.GamesTable,
			Columns: []string{mjlog.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.GamesTable,
			Columns: []string{mjlog.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MJLog{config: mluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mluo.mutation.done = true
	return _node, nil
}
