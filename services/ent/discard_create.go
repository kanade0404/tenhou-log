// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/discard"
	"github.com/kanade0404/tenhou-log/services/ent/drawn"
	"github.com/kanade0404/tenhou-log/services/ent/reach"
)

// DiscardCreate is the builder for creating a Discard entity.
type DiscardCreate struct {
	config
	mutation *DiscardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetID sets the "id" field.
func (dc *DiscardCreate) SetID(u uuid.UUID) *DiscardCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DiscardCreate) SetNillableID(u *uuid.UUID) *DiscardCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetReachID sets the "reach" edge to the Reach entity by ID.
func (dc *DiscardCreate) SetReachID(id uuid.UUID) *DiscardCreate {
	dc.mutation.SetReachID(id)
	return dc
}

// SetNillableReachID sets the "reach" edge to the Reach entity by ID if the given value is not nil.
func (dc *DiscardCreate) SetNillableReachID(id *uuid.UUID) *DiscardCreate {
	if id != nil {
		dc = dc.SetReachID(*id)
	}
	return dc
}

// SetReach sets the "reach" edge to the Reach entity.
func (dc *DiscardCreate) SetReach(r *Reach) *DiscardCreate {
	return dc.SetReachID(r.ID)
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (dc *DiscardCreate) SetCallID(id uuid.UUID) *DiscardCreate {
	dc.mutation.SetCallID(id)
	return dc
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (dc *DiscardCreate) SetNillableCallID(id *uuid.UUID) *DiscardCreate {
	if id != nil {
		dc = dc.SetCallID(*id)
	}
	return dc
}

// SetCall sets the "call" edge to the Call entity.
func (dc *DiscardCreate) SetCall(c *Call) *DiscardCreate {
	return dc.SetCallID(c.ID)
}

// SetDrawID sets the "draw" edge to the Drawn entity by ID.
func (dc *DiscardCreate) SetDrawID(id uuid.UUID) *DiscardCreate {
	dc.mutation.SetDrawID(id)
	return dc
}

// SetNillableDrawID sets the "draw" edge to the Drawn entity by ID if the given value is not nil.
func (dc *DiscardCreate) SetNillableDrawID(id *uuid.UUID) *DiscardCreate {
	if id != nil {
		dc = dc.SetDrawID(*id)
	}
	return dc
}

// SetDraw sets the "draw" edge to the Drawn entity.
func (dc *DiscardCreate) SetDraw(d *Drawn) *DiscardCreate {
	return dc.SetDrawID(d.ID)
}

// Mutation returns the DiscardMutation object of the builder.
func (dc *DiscardCreate) Mutation() *DiscardMutation {
	return dc.mutation
}

// Save creates the Discard in the database.
func (dc *DiscardCreate) Save(ctx context.Context) (*Discard, error) {
	dc.defaults()
	return withHooks[*Discard, DiscardMutation](ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DiscardCreate) SaveX(ctx context.Context) *Discard {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DiscardCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DiscardCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DiscardCreate) defaults() {
	if _, ok := dc.mutation.ID(); !ok {
		v := discard.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DiscardCreate) check() error {
	return nil
}

func (dc *DiscardCreate) sqlSave(ctx context.Context) (*Discard, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DiscardCreate) createSpec() (*Discard, *sqlgraph.CreateSpec) {
	var (
		_node = &Discard{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discard.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discard.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := dc.mutation.ReachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   discard.ReachTable,
			Columns: []string{discard.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   discard.CallTable,
			Columns: []string{discard.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DrawIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   discard.DrawTable,
			Columns: []string{discard.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Discard.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (dc *DiscardCreate) OnConflict(opts ...sql.ConflictOption) *DiscardUpsertOne {
	dc.conflict = opts
	return &DiscardUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Discard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DiscardCreate) OnConflictColumns(columns ...string) *DiscardUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DiscardUpsertOne{
		create: dc,
	}
}

type (
	// DiscardUpsertOne is the builder for "upsert"-ing
	//  one Discard node.
	DiscardUpsertOne struct {
		create *DiscardCreate
	}

	// DiscardUpsert is the "OnConflict" setter.
	DiscardUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Discard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DiscardUpsertOne) UpdateNewValues() *DiscardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(discard.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Discard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DiscardUpsertOne) Ignore() *DiscardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscardUpsertOne) DoNothing() *DiscardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscardCreate.OnConflict
// documentation for more info.
func (u *DiscardUpsertOne) Update(set func(*DiscardUpsert)) *DiscardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscardUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *DiscardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DiscardUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DiscardUpsertOne.ID is not supported by MySQL driver. Use DiscardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DiscardUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DiscardCreateBulk is the builder for creating many Discard entities in bulk.
type DiscardCreateBulk struct {
	config
	builders []*DiscardCreate
	conflict []sql.ConflictOption
}

// Save creates the Discard entities in the database.
func (dcb *DiscardCreateBulk) Save(ctx context.Context) ([]*Discard, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Discard, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DiscardCreateBulk) SaveX(ctx context.Context) []*Discard {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DiscardCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DiscardCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Discard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (dcb *DiscardCreateBulk) OnConflict(opts ...sql.ConflictOption) *DiscardUpsertBulk {
	dcb.conflict = opts
	return &DiscardUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Discard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DiscardCreateBulk) OnConflictColumns(columns ...string) *DiscardUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DiscardUpsertBulk{
		create: dcb,
	}
}

// DiscardUpsertBulk is the builder for "upsert"-ing
// a bulk of Discard nodes.
type DiscardUpsertBulk struct {
	create *DiscardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Discard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DiscardUpsertBulk) UpdateNewValues() *DiscardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(discard.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Discard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DiscardUpsertBulk) Ignore() *DiscardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscardUpsertBulk) DoNothing() *DiscardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscardCreateBulk.OnConflict
// documentation for more info.
func (u *DiscardUpsertBulk) Update(set func(*DiscardUpsert)) *DiscardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscardUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *DiscardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DiscardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
