// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/chakan"
	"github.com/kanade0404/tenhou-log/services/ent/chii"
	"github.com/kanade0404/tenhou-log/services/ent/concealedkan"
	"github.com/kanade0404/tenhou-log/services/ent/discard"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/meldedkan"
	"github.com/kanade0404/tenhou-log/services/ent/pon"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// CallQuery is the builder for querying Call entities.
type CallQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	inters           []Interceptor
	predicates       []predicate.Call
	withEvent        *EventQuery
	withDiscard      *DiscardQuery
	withChii         *ChiiQuery
	withChakan       *ChakanQuery
	withConcealedkan *ConcealedKanQuery
	withMeldedkan    *MeldedKanQuery
	withPon          *PonQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CallQuery builder.
func (cq *CallQuery) Where(ps ...predicate.Call) *CallQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CallQuery) Limit(limit int) *CallQuery {
	cq.limit = &limit
	return cq
}

// Offset to start from.
func (cq *CallQuery) Offset(offset int) *CallQuery {
	cq.offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CallQuery) Unique(unique bool) *CallQuery {
	cq.unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CallQuery) Order(o ...OrderFunc) *CallQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryEvent chains the current query on the "event" edge.
func (cq *CallQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, call.EventTable, call.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscard chains the current query on the "discard" edge.
func (cq *CallQuery) QueryDiscard() *DiscardQuery {
	query := (&DiscardClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(discard.Table, discard.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.DiscardTable, call.DiscardColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChii chains the current query on the "chii" edge.
func (cq *CallQuery) QueryChii() *ChiiQuery {
	query := (&ChiiClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(chii.Table, chii.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.ChiiTable, call.ChiiColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChakan chains the current query on the "chakan" edge.
func (cq *CallQuery) QueryChakan() *ChakanQuery {
	query := (&ChakanClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(chakan.Table, chakan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.ChakanTable, call.ChakanColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConcealedkan chains the current query on the "concealedkan" edge.
func (cq *CallQuery) QueryConcealedkan() *ConcealedKanQuery {
	query := (&ConcealedKanClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(concealedkan.Table, concealedkan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.ConcealedkanTable, call.ConcealedkanColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMeldedkan chains the current query on the "meldedkan" edge.
func (cq *CallQuery) QueryMeldedkan() *MeldedKanQuery {
	query := (&MeldedKanClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(meldedkan.Table, meldedkan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.MeldedkanTable, call.MeldedkanColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPon chains the current query on the "pon" edge.
func (cq *CallQuery) QueryPon() *PonQuery {
	query := (&PonClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(call.Table, call.FieldID, selector),
			sqlgraph.To(pon.Table, pon.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, call.PonTable, call.PonColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Call entity from the query.
// Returns a *NotFoundError when no Call was found.
func (cq *CallQuery) First(ctx context.Context) (*Call, error) {
	nodes, err := cq.Limit(1).All(newQueryContext(ctx, TypeCall, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{call.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CallQuery) FirstX(ctx context.Context) *Call {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Call ID from the query.
// Returns a *NotFoundError when no Call ID was found.
func (cq *CallQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(1).IDs(newQueryContext(ctx, TypeCall, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{call.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CallQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Call entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Call entity is found.
// Returns a *NotFoundError when no Call entities are found.
func (cq *CallQuery) Only(ctx context.Context) (*Call, error) {
	nodes, err := cq.Limit(2).All(newQueryContext(ctx, TypeCall, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{call.Label}
	default:
		return nil, &NotSingularError{call.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CallQuery) OnlyX(ctx context.Context) *Call {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Call ID in the query.
// Returns a *NotSingularError when more than one Call ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CallQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(2).IDs(newQueryContext(ctx, TypeCall, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{call.Label}
	default:
		err = &NotSingularError{call.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CallQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Calls.
func (cq *CallQuery) All(ctx context.Context) ([]*Call, error) {
	ctx = newQueryContext(ctx, TypeCall, "All")
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Call, *CallQuery]()
	return withInterceptors[[]*Call](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CallQuery) AllX(ctx context.Context) []*Call {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Call IDs.
func (cq *CallQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = newQueryContext(ctx, TypeCall, "IDs")
	if err := cq.Select(call.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CallQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CallQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeCall, "Count")
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CallQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CallQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CallQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeCall, "Exist")
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CallQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CallQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CallQuery) Clone() *CallQuery {
	if cq == nil {
		return nil
	}
	return &CallQuery{
		config:           cq.config,
		limit:            cq.limit,
		offset:           cq.offset,
		order:            append([]OrderFunc{}, cq.order...),
		inters:           append([]Interceptor{}, cq.inters...),
		predicates:       append([]predicate.Call{}, cq.predicates...),
		withEvent:        cq.withEvent.Clone(),
		withDiscard:      cq.withDiscard.Clone(),
		withChii:         cq.withChii.Clone(),
		withChakan:       cq.withChakan.Clone(),
		withConcealedkan: cq.withConcealedkan.Clone(),
		withMeldedkan:    cq.withMeldedkan.Clone(),
		withPon:          cq.withPon.Clone(),
		// clone intermediate query.
		sql:    cq.sql.Clone(),
		path:   cq.path,
		unique: cq.unique,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithEvent(opts ...func(*EventQuery)) *CallQuery {
	query := (&EventClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withEvent = query
	return cq
}

// WithDiscard tells the query-builder to eager-load the nodes that are connected to
// the "discard" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithDiscard(opts ...func(*DiscardQuery)) *CallQuery {
	query := (&DiscardClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDiscard = query
	return cq
}

// WithChii tells the query-builder to eager-load the nodes that are connected to
// the "chii" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithChii(opts ...func(*ChiiQuery)) *CallQuery {
	query := (&ChiiClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withChii = query
	return cq
}

// WithChakan tells the query-builder to eager-load the nodes that are connected to
// the "chakan" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithChakan(opts ...func(*ChakanQuery)) *CallQuery {
	query := (&ChakanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withChakan = query
	return cq
}

// WithConcealedkan tells the query-builder to eager-load the nodes that are connected to
// the "concealedkan" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithConcealedkan(opts ...func(*ConcealedKanQuery)) *CallQuery {
	query := (&ConcealedKanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConcealedkan = query
	return cq
}

// WithMeldedkan tells the query-builder to eager-load the nodes that are connected to
// the "meldedkan" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithMeldedkan(opts ...func(*MeldedKanQuery)) *CallQuery {
	query := (&MeldedKanClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withMeldedkan = query
	return cq
}

// WithPon tells the query-builder to eager-load the nodes that are connected to
// the "pon" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CallQuery) WithPon(opts ...func(*PonQuery)) *CallQuery {
	query := (&PonClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPon = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (cq *CallQuery) GroupBy(field string, fields ...string) *CallGroupBy {
	cq.fields = append([]string{field}, fields...)
	grbuild := &CallGroupBy{build: cq}
	grbuild.flds = &cq.fields
	grbuild.label = call.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (cq *CallQuery) Select(fields ...string) *CallSelect {
	cq.fields = append(cq.fields, fields...)
	sbuild := &CallSelect{CallQuery: cq}
	sbuild.label = call.Label
	sbuild.flds, sbuild.scan = &cq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CallSelect configured with the given aggregations.
func (cq *CallQuery) Aggregate(fns ...AggregateFunc) *CallSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CallQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.fields {
		if !call.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CallQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Call, error) {
	var (
		nodes       = []*Call{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [7]bool{
			cq.withEvent != nil,
			cq.withDiscard != nil,
			cq.withChii != nil,
			cq.withChakan != nil,
			cq.withConcealedkan != nil,
			cq.withMeldedkan != nil,
			cq.withPon != nil,
		}
	)
	if cq.withEvent != nil || cq.withDiscard != nil || cq.withChii != nil || cq.withChakan != nil || cq.withConcealedkan != nil || cq.withMeldedkan != nil || cq.withPon != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, call.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Call).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Call{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withEvent; query != nil {
		if err := cq.loadEvent(ctx, query, nodes, nil,
			func(n *Call, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDiscard; query != nil {
		if err := cq.loadDiscard(ctx, query, nodes, nil,
			func(n *Call, e *Discard) { n.Edges.Discard = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withChii; query != nil {
		if err := cq.loadChii(ctx, query, nodes, nil,
			func(n *Call, e *Chii) { n.Edges.Chii = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withChakan; query != nil {
		if err := cq.loadChakan(ctx, query, nodes, nil,
			func(n *Call, e *Chakan) { n.Edges.Chakan = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConcealedkan; query != nil {
		if err := cq.loadConcealedkan(ctx, query, nodes, nil,
			func(n *Call, e *ConcealedKan) { n.Edges.Concealedkan = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withMeldedkan; query != nil {
		if err := cq.loadMeldedkan(ctx, query, nodes, nil,
			func(n *Call, e *MeldedKan) { n.Edges.Meldedkan = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPon; query != nil {
		if err := cq.loadPon(ctx, query, nodes, nil,
			func(n *Call, e *Pon) { n.Edges.Pon = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CallQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*Call, init func(*Call), assign func(*Call, *Event)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].event_call == nil {
			continue
		}
		fk := *nodes[i].event_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadDiscard(ctx context.Context, query *DiscardQuery, nodes []*Call, init func(*Call), assign func(*Call, *Discard)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].discard_call == nil {
			continue
		}
		fk := *nodes[i].discard_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(discard.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "discard_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadChii(ctx context.Context, query *ChiiQuery, nodes []*Call, init func(*Call), assign func(*Call, *Chii)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].chii_call == nil {
			continue
		}
		fk := *nodes[i].chii_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(chii.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chii_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadChakan(ctx context.Context, query *ChakanQuery, nodes []*Call, init func(*Call), assign func(*Call, *Chakan)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].chakan_call == nil {
			continue
		}
		fk := *nodes[i].chakan_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(chakan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chakan_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadConcealedkan(ctx context.Context, query *ConcealedKanQuery, nodes []*Call, init func(*Call), assign func(*Call, *ConcealedKan)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].concealed_kan_call == nil {
			continue
		}
		fk := *nodes[i].concealed_kan_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(concealedkan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "concealed_kan_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadMeldedkan(ctx context.Context, query *MeldedKanQuery, nodes []*Call, init func(*Call), assign func(*Call, *MeldedKan)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].melded_kan_call == nil {
			continue
		}
		fk := *nodes[i].melded_kan_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(meldedkan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "melded_kan_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CallQuery) loadPon(ctx context.Context, query *PonQuery, nodes []*Call, init func(*Call), assign func(*Call, *Pon)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Call)
	for i := range nodes {
		if nodes[i].pon_call == nil {
			continue
		}
		fk := *nodes[i].pon_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(pon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pon_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cq *CallQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Columns = cq.fields
	if len(cq.fields) > 0 {
		_spec.Unique = cq.unique != nil && *cq.unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CallQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   call.Table,
			Columns: call.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: call.FieldID,
			},
		},
		From:   cq.sql,
		Unique: true,
	}
	if unique := cq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, call.FieldID)
		for i := range fields {
			if fields[i] != call.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CallQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(call.Table)
	columns := cq.fields
	if len(columns) == 0 {
		columns = call.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.unique != nil && *cq.unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CallGroupBy is the group-by builder for Call entities.
type CallGroupBy struct {
	selector
	build *CallQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CallGroupBy) Aggregate(fns ...AggregateFunc) *CallGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CallGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeCall, "GroupBy")
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallQuery, *CallGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CallGroupBy) sqlScan(ctx context.Context, root *CallQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CallSelect is the builder for selecting fields of Call entities.
type CallSelect struct {
	*CallQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CallSelect) Aggregate(fns ...AggregateFunc) *CallSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CallSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeCall, "Select")
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallQuery, *CallSelect](ctx, cs.CallQuery, cs, cs.inters, v)
}

func (cs *CallSelect) sqlScan(ctx context.Context, root *CallQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
