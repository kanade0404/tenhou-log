// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/drawn"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/reach"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
	"github.com/kanade0404/tenhou-log/services/ent/win"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTurnID sets the "turn" edge to the Turn entity by ID.
func (eu *EventUpdate) SetTurnID(id uuid.UUID) *EventUpdate {
	eu.mutation.SetTurnID(id)
	return eu
}

// SetTurn sets the "turn" edge to the Turn entity.
func (eu *EventUpdate) SetTurn(t *Turn) *EventUpdate {
	return eu.SetTurnID(t.ID)
}

// AddWinIDs adds the "win" edge to the Win entity by IDs.
func (eu *EventUpdate) AddWinIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddWinIDs(ids...)
	return eu
}

// AddWin adds the "win" edges to the Win entity.
func (eu *EventUpdate) AddWin(w ...*Win) *EventUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddWinIDs(ids...)
}

// AddCallIDs adds the "call" edge to the Call entity by IDs.
func (eu *EventUpdate) AddCallIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddCallIDs(ids...)
	return eu
}

// AddCall adds the "call" edges to the Call entity.
func (eu *EventUpdate) AddCall(c ...*Call) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCallIDs(ids...)
}

// AddDrawIDs adds the "draw" edge to the Drawn entity by IDs.
func (eu *EventUpdate) AddDrawIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddDrawIDs(ids...)
	return eu
}

// AddDraw adds the "draw" edges to the Drawn entity.
func (eu *EventUpdate) AddDraw(d ...*Drawn) *EventUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDrawIDs(ids...)
}

// AddReachIDs adds the "reach" edge to the Reach entity by IDs.
func (eu *EventUpdate) AddReachIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddReachIDs(ids...)
	return eu
}

// AddReach adds the "reach" edges to the Reach entity.
func (eu *EventUpdate) AddReach(r ...*Reach) *EventUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddReachIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearTurn clears the "turn" edge to the Turn entity.
func (eu *EventUpdate) ClearTurn() *EventUpdate {
	eu.mutation.ClearTurn()
	return eu
}

// ClearWin clears all "win" edges to the Win entity.
func (eu *EventUpdate) ClearWin() *EventUpdate {
	eu.mutation.ClearWin()
	return eu
}

// RemoveWinIDs removes the "win" edge to Win entities by IDs.
func (eu *EventUpdate) RemoveWinIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveWinIDs(ids...)
	return eu
}

// RemoveWin removes "win" edges to Win entities.
func (eu *EventUpdate) RemoveWin(w ...*Win) *EventUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveWinIDs(ids...)
}

// ClearCall clears all "call" edges to the Call entity.
func (eu *EventUpdate) ClearCall() *EventUpdate {
	eu.mutation.ClearCall()
	return eu
}

// RemoveCallIDs removes the "call" edge to Call entities by IDs.
func (eu *EventUpdate) RemoveCallIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveCallIDs(ids...)
	return eu
}

// RemoveCall removes "call" edges to Call entities.
func (eu *EventUpdate) RemoveCall(c ...*Call) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCallIDs(ids...)
}

// ClearDraw clears all "draw" edges to the Drawn entity.
func (eu *EventUpdate) ClearDraw() *EventUpdate {
	eu.mutation.ClearDraw()
	return eu
}

// RemoveDrawIDs removes the "draw" edge to Drawn entities by IDs.
func (eu *EventUpdate) RemoveDrawIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveDrawIDs(ids...)
	return eu
}

// RemoveDraw removes "draw" edges to Drawn entities.
func (eu *EventUpdate) RemoveDraw(d ...*Drawn) *EventUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDrawIDs(ids...)
}

// ClearReach clears all "reach" edges to the Reach entity.
func (eu *EventUpdate) ClearReach() *EventUpdate {
	eu.mutation.ClearReach()
	return eu
}

// RemoveReachIDs removes the "reach" edge to Reach entities by IDs.
func (eu *EventUpdate) RemoveReachIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveReachIDs(ids...)
	return eu
}

// RemoveReach removes "reach" edges to Reach entities.
func (eu *EventUpdate) RemoveReach(r ...*Reach) *EventUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveReachIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if _, ok := eu.mutation.TurnID(); eu.mutation.TurnCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.turn"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eu.mutation.TurnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.TurnTable,
			Columns: []string{event.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TurnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.TurnTable,
			Columns: []string{event.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.WinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedWinIDs(); len(nodes) > 0 && !eu.mutation.WinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCallIDs(); len(nodes) > 0 && !eu.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DrawCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDrawIDs(); len(nodes) > 0 && !eu.mutation.DrawCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DrawIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedReachIDs(); len(nodes) > 0 && !eu.mutation.ReachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetTurnID sets the "turn" edge to the Turn entity by ID.
func (euo *EventUpdateOne) SetTurnID(id uuid.UUID) *EventUpdateOne {
	euo.mutation.SetTurnID(id)
	return euo
}

// SetTurn sets the "turn" edge to the Turn entity.
func (euo *EventUpdateOne) SetTurn(t *Turn) *EventUpdateOne {
	return euo.SetTurnID(t.ID)
}

// AddWinIDs adds the "win" edge to the Win entity by IDs.
func (euo *EventUpdateOne) AddWinIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddWinIDs(ids...)
	return euo
}

// AddWin adds the "win" edges to the Win entity.
func (euo *EventUpdateOne) AddWin(w ...*Win) *EventUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddWinIDs(ids...)
}

// AddCallIDs adds the "call" edge to the Call entity by IDs.
func (euo *EventUpdateOne) AddCallIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddCallIDs(ids...)
	return euo
}

// AddCall adds the "call" edges to the Call entity.
func (euo *EventUpdateOne) AddCall(c ...*Call) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCallIDs(ids...)
}

// AddDrawIDs adds the "draw" edge to the Drawn entity by IDs.
func (euo *EventUpdateOne) AddDrawIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddDrawIDs(ids...)
	return euo
}

// AddDraw adds the "draw" edges to the Drawn entity.
func (euo *EventUpdateOne) AddDraw(d ...*Drawn) *EventUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDrawIDs(ids...)
}

// AddReachIDs adds the "reach" edge to the Reach entity by IDs.
func (euo *EventUpdateOne) AddReachIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddReachIDs(ids...)
	return euo
}

// AddReach adds the "reach" edges to the Reach entity.
func (euo *EventUpdateOne) AddReach(r ...*Reach) *EventUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddReachIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearTurn clears the "turn" edge to the Turn entity.
func (euo *EventUpdateOne) ClearTurn() *EventUpdateOne {
	euo.mutation.ClearTurn()
	return euo
}

// ClearWin clears all "win" edges to the Win entity.
func (euo *EventUpdateOne) ClearWin() *EventUpdateOne {
	euo.mutation.ClearWin()
	return euo
}

// RemoveWinIDs removes the "win" edge to Win entities by IDs.
func (euo *EventUpdateOne) RemoveWinIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveWinIDs(ids...)
	return euo
}

// RemoveWin removes "win" edges to Win entities.
func (euo *EventUpdateOne) RemoveWin(w ...*Win) *EventUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveWinIDs(ids...)
}

// ClearCall clears all "call" edges to the Call entity.
func (euo *EventUpdateOne) ClearCall() *EventUpdateOne {
	euo.mutation.ClearCall()
	return euo
}

// RemoveCallIDs removes the "call" edge to Call entities by IDs.
func (euo *EventUpdateOne) RemoveCallIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveCallIDs(ids...)
	return euo
}

// RemoveCall removes "call" edges to Call entities.
func (euo *EventUpdateOne) RemoveCall(c ...*Call) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCallIDs(ids...)
}

// ClearDraw clears all "draw" edges to the Drawn entity.
func (euo *EventUpdateOne) ClearDraw() *EventUpdateOne {
	euo.mutation.ClearDraw()
	return euo
}

// RemoveDrawIDs removes the "draw" edge to Drawn entities by IDs.
func (euo *EventUpdateOne) RemoveDrawIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveDrawIDs(ids...)
	return euo
}

// RemoveDraw removes "draw" edges to Drawn entities.
func (euo *EventUpdateOne) RemoveDraw(d ...*Drawn) *EventUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDrawIDs(ids...)
}

// ClearReach clears all "reach" edges to the Reach entity.
func (euo *EventUpdateOne) ClearReach() *EventUpdateOne {
	euo.mutation.ClearReach()
	return euo
}

// RemoveReachIDs removes the "reach" edge to Reach entities by IDs.
func (euo *EventUpdateOne) RemoveReachIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveReachIDs(ids...)
	return euo
}

// RemoveReach removes "reach" edges to Reach entities.
func (euo *EventUpdateOne) RemoveReach(r ...*Reach) *EventUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveReachIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if _, ok := euo.mutation.TurnID(); euo.mutation.TurnCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.turn"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if euo.mutation.TurnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.TurnTable,
			Columns: []string{event.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TurnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.TurnTable,
			Columns: []string{event.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: turn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.WinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedWinIDs(); len(nodes) > 0 && !euo.mutation.WinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.WinTable,
			Columns: []string{event.WinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: win.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCallIDs(); len(nodes) > 0 && !euo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CallTable,
			Columns: []string{event.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DrawCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDrawIDs(); len(nodes) > 0 && !euo.mutation.DrawCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DrawIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DrawTable,
			Columns: []string{event.DrawColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drawn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedReachIDs(); len(nodes) > 0 && !euo.mutation.ReachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ReachTable,
			Columns: []string{event.ReachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: reach.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
