// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfilecompressed"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// MJLogFileCompressedUpdate is the builder for updating MJLogFileCompressed entities.
type MJLogFileCompressedUpdate struct {
	config
	hooks    []Hook
	mutation *MJLogFileCompressedMutation
}

// Where appends a list predicates to the MJLogFileCompressedUpdate builder.
func (mlfcu *MJLogFileCompressedUpdate) Where(ps ...predicate.MJLogFileCompressed) *MJLogFileCompressedUpdate {
	mlfcu.mutation.Where(ps...)
	return mlfcu
}

// AddCompressedMjlogFileIDs adds the "compressed_mjlog_files" edge to the CompressedMJLog entity by IDs.
func (mlfcu *MJLogFileCompressedUpdate) AddCompressedMjlogFileIDs(ids ...uuid.UUID) *MJLogFileCompressedUpdate {
	mlfcu.mutation.AddCompressedMjlogFileIDs(ids...)
	return mlfcu
}

// AddCompressedMjlogFiles adds the "compressed_mjlog_files" edges to the CompressedMJLog entity.
func (mlfcu *MJLogFileCompressedUpdate) AddCompressedMjlogFiles(c ...*CompressedMJLog) *MJLogFileCompressedUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mlfcu.AddCompressedMjlogFileIDs(ids...)
}

// Mutation returns the MJLogFileCompressedMutation object of the builder.
func (mlfcu *MJLogFileCompressedUpdate) Mutation() *MJLogFileCompressedMutation {
	return mlfcu.mutation
}

// ClearCompressedMjlogFiles clears all "compressed_mjlog_files" edges to the CompressedMJLog entity.
func (mlfcu *MJLogFileCompressedUpdate) ClearCompressedMjlogFiles() *MJLogFileCompressedUpdate {
	mlfcu.mutation.ClearCompressedMjlogFiles()
	return mlfcu
}

// RemoveCompressedMjlogFileIDs removes the "compressed_mjlog_files" edge to CompressedMJLog entities by IDs.
func (mlfcu *MJLogFileCompressedUpdate) RemoveCompressedMjlogFileIDs(ids ...uuid.UUID) *MJLogFileCompressedUpdate {
	mlfcu.mutation.RemoveCompressedMjlogFileIDs(ids...)
	return mlfcu
}

// RemoveCompressedMjlogFiles removes "compressed_mjlog_files" edges to CompressedMJLog entities.
func (mlfcu *MJLogFileCompressedUpdate) RemoveCompressedMjlogFiles(c ...*CompressedMJLog) *MJLogFileCompressedUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mlfcu.RemoveCompressedMjlogFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlfcu *MJLogFileCompressedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mlfcu.hooks) == 0 {
		affected, err = mlfcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MJLogFileCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mlfcu.mutation = mutation
			affected, err = mlfcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mlfcu.hooks) - 1; i >= 0; i-- {
			if mlfcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlfcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mlfcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mlfcu *MJLogFileCompressedUpdate) SaveX(ctx context.Context) int {
	affected, err := mlfcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlfcu *MJLogFileCompressedUpdate) Exec(ctx context.Context) error {
	_, err := mlfcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfcu *MJLogFileCompressedUpdate) ExecX(ctx context.Context) {
	if err := mlfcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mlfcu *MJLogFileCompressedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mjlogfilecompressed.Table,
			Columns: mjlogfilecompressed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlogfilecompressed.FieldID,
			},
		},
	}
	if ps := mlfcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mlfcu.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfcu.mutation.RemovedCompressedMjlogFilesIDs(); len(nodes) > 0 && !mlfcu.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfcu.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlfcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlogfilecompressed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MJLogFileCompressedUpdateOne is the builder for updating a single MJLogFileCompressed entity.
type MJLogFileCompressedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MJLogFileCompressedMutation
}

// AddCompressedMjlogFileIDs adds the "compressed_mjlog_files" edge to the CompressedMJLog entity by IDs.
func (mlfcuo *MJLogFileCompressedUpdateOne) AddCompressedMjlogFileIDs(ids ...uuid.UUID) *MJLogFileCompressedUpdateOne {
	mlfcuo.mutation.AddCompressedMjlogFileIDs(ids...)
	return mlfcuo
}

// AddCompressedMjlogFiles adds the "compressed_mjlog_files" edges to the CompressedMJLog entity.
func (mlfcuo *MJLogFileCompressedUpdateOne) AddCompressedMjlogFiles(c ...*CompressedMJLog) *MJLogFileCompressedUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mlfcuo.AddCompressedMjlogFileIDs(ids...)
}

// Mutation returns the MJLogFileCompressedMutation object of the builder.
func (mlfcuo *MJLogFileCompressedUpdateOne) Mutation() *MJLogFileCompressedMutation {
	return mlfcuo.mutation
}

// ClearCompressedMjlogFiles clears all "compressed_mjlog_files" edges to the CompressedMJLog entity.
func (mlfcuo *MJLogFileCompressedUpdateOne) ClearCompressedMjlogFiles() *MJLogFileCompressedUpdateOne {
	mlfcuo.mutation.ClearCompressedMjlogFiles()
	return mlfcuo
}

// RemoveCompressedMjlogFileIDs removes the "compressed_mjlog_files" edge to CompressedMJLog entities by IDs.
func (mlfcuo *MJLogFileCompressedUpdateOne) RemoveCompressedMjlogFileIDs(ids ...uuid.UUID) *MJLogFileCompressedUpdateOne {
	mlfcuo.mutation.RemoveCompressedMjlogFileIDs(ids...)
	return mlfcuo
}

// RemoveCompressedMjlogFiles removes "compressed_mjlog_files" edges to CompressedMJLog entities.
func (mlfcuo *MJLogFileCompressedUpdateOne) RemoveCompressedMjlogFiles(c ...*CompressedMJLog) *MJLogFileCompressedUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mlfcuo.RemoveCompressedMjlogFileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mlfcuo *MJLogFileCompressedUpdateOne) Select(field string, fields ...string) *MJLogFileCompressedUpdateOne {
	mlfcuo.fields = append([]string{field}, fields...)
	return mlfcuo
}

// Save executes the query and returns the updated MJLogFileCompressed entity.
func (mlfcuo *MJLogFileCompressedUpdateOne) Save(ctx context.Context) (*MJLogFileCompressed, error) {
	var (
		err  error
		node *MJLogFileCompressed
	)
	if len(mlfcuo.hooks) == 0 {
		node, err = mlfcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MJLogFileCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mlfcuo.mutation = mutation
			node, err = mlfcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mlfcuo.hooks) - 1; i >= 0; i-- {
			if mlfcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlfcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mlfcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MJLogFileCompressed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MJLogFileCompressedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mlfcuo *MJLogFileCompressedUpdateOne) SaveX(ctx context.Context) *MJLogFileCompressed {
	node, err := mlfcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mlfcuo *MJLogFileCompressedUpdateOne) Exec(ctx context.Context) error {
	_, err := mlfcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfcuo *MJLogFileCompressedUpdateOne) ExecX(ctx context.Context) {
	if err := mlfcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mlfcuo *MJLogFileCompressedUpdateOne) sqlSave(ctx context.Context) (_node *MJLogFileCompressed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mjlogfilecompressed.Table,
			Columns: mjlogfilecompressed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlogfilecompressed.FieldID,
			},
		},
	}
	id, ok := mlfcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MJLogFileCompressed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mlfcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mjlogfilecompressed.FieldID)
		for _, f := range fields {
			if !mjlogfilecompressed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mjlogfilecompressed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mlfcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mlfcuo.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfcuo.mutation.RemovedCompressedMjlogFilesIDs(); len(nodes) > 0 && !mlfcuo.mutation.CompressedMjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlfcuo.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MJLogFileCompressed{config: mlfcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mlfcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mjlogfilecompressed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
