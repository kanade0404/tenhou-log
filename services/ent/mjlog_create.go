// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/mjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
)

// MJLogCreate is the builder for creating a MJLog entity.
type MJLogCreate struct {
	config
	mutation *MJLogMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (mlc *MJLogCreate) SetVersion(f float64) *MJLogCreate {
	mlc.mutation.SetVersion(f)
	return mlc
}

// SetSeed sets the "seed" field.
func (mlc *MJLogCreate) SetSeed(s string) *MJLogCreate {
	mlc.mutation.SetSeed(s)
	return mlc
}

// SetStartedAt sets the "started_at" field.
func (mlc *MJLogCreate) SetStartedAt(t time.Time) *MJLogCreate {
	mlc.mutation.SetStartedAt(t)
	return mlc
}

// SetInsertedAt sets the "inserted_at" field.
func (mlc *MJLogCreate) SetInsertedAt(t time.Time) *MJLogCreate {
	mlc.mutation.SetInsertedAt(t)
	return mlc
}

// SetNillableInsertedAt sets the "inserted_at" field if the given value is not nil.
func (mlc *MJLogCreate) SetNillableInsertedAt(t *time.Time) *MJLogCreate {
	if t != nil {
		mlc.SetInsertedAt(*t)
	}
	return mlc
}

// SetID sets the "id" field.
func (mlc *MJLogCreate) SetID(u uuid.UUID) *MJLogCreate {
	mlc.mutation.SetID(u)
	return mlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlc *MJLogCreate) SetNillableID(u *uuid.UUID) *MJLogCreate {
	if u != nil {
		mlc.SetID(*u)
	}
	return mlc
}

// SetMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID.
func (mlc *MJLogCreate) SetMjlogFilesID(id uuid.UUID) *MJLogCreate {
	mlc.mutation.SetMjlogFilesID(id)
	return mlc
}

// SetNillableMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID if the given value is not nil.
func (mlc *MJLogCreate) SetNillableMjlogFilesID(id *uuid.UUID) *MJLogCreate {
	if id != nil {
		mlc = mlc.SetMjlogFilesID(*id)
	}
	return mlc
}

// SetMjlogFiles sets the "mjlog_files" edge to the MJLogFile entity.
func (mlc *MJLogCreate) SetMjlogFiles(m *MJLogFile) *MJLogCreate {
	return mlc.SetMjlogFilesID(m.ID)
}

// Mutation returns the MJLogMutation object of the builder.
func (mlc *MJLogCreate) Mutation() *MJLogMutation {
	return mlc.mutation
}

// Save creates the MJLog in the database.
func (mlc *MJLogCreate) Save(ctx context.Context) (*MJLog, error) {
	var (
		err  error
		node *MJLog
	)
	mlc.defaults()
	if len(mlc.hooks) == 0 {
		if err = mlc.check(); err != nil {
			return nil, err
		}
		node, err = mlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MJLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mlc.check(); err != nil {
				return nil, err
			}
			mlc.mutation = mutation
			if node, err = mlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mlc.hooks) - 1; i >= 0; i-- {
			if mlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mlc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MJLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MJLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *MJLogCreate) SaveX(ctx context.Context) *MJLog {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlc *MJLogCreate) Exec(ctx context.Context) error {
	_, err := mlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlc *MJLogCreate) ExecX(ctx context.Context) {
	if err := mlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlc *MJLogCreate) defaults() {
	if _, ok := mlc.mutation.InsertedAt(); !ok {
		v := mjlog.DefaultInsertedAt()
		mlc.mutation.SetInsertedAt(v)
	}
	if _, ok := mlc.mutation.ID(); !ok {
		v := mjlog.DefaultID()
		mlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *MJLogCreate) check() error {
	if _, ok := mlc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "MJLog.version"`)}
	}
	if _, ok := mlc.mutation.Seed(); !ok {
		return &ValidationError{Name: "seed", err: errors.New(`ent: missing required field "MJLog.seed"`)}
	}
	if _, ok := mlc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "MJLog.started_at"`)}
	}
	if _, ok := mlc.mutation.InsertedAt(); !ok {
		return &ValidationError{Name: "inserted_at", err: errors.New(`ent: missing required field "MJLog.inserted_at"`)}
	}
	return nil
}

func (mlc *MJLogCreate) sqlSave(ctx context.Context) (*MJLog, error) {
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mlc *MJLogCreate) createSpec() (*MJLog, *sqlgraph.CreateSpec) {
	var (
		_node = &MJLog{config: mlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mjlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlog.FieldID,
			},
		}
	)
	if id, ok := mlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mlc.mutation.Version(); ok {
		_spec.SetField(mjlog.FieldVersion, field.TypeFloat64, value)
		_node.Version = value
	}
	if value, ok := mlc.mutation.Seed(); ok {
		_spec.SetField(mjlog.FieldSeed, field.TypeString, value)
		_node.Seed = value
	}
	if value, ok := mlc.mutation.StartedAt(); ok {
		_spec.SetField(mjlog.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := mlc.mutation.InsertedAt(); ok {
		_spec.SetField(mjlog.FieldInsertedAt, field.TypeTime, value)
		_node.InsertedAt = value
	}
	if nodes := mlc.mutation.MjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlog.MjlogFilesTable,
			Columns: []string{mjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlogfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mj_log_file_mjlogs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MJLogCreateBulk is the builder for creating many MJLog entities in bulk.
type MJLogCreateBulk struct {
	config
	builders []*MJLogCreate
}

// Save creates the MJLog entities in the database.
func (mlcb *MJLogCreateBulk) Save(ctx context.Context) ([]*MJLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*MJLog, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MJLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlcb *MJLogCreateBulk) SaveX(ctx context.Context) []*MJLog {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlcb *MJLogCreateBulk) Exec(ctx context.Context) error {
	_, err := mlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlcb *MJLogCreateBulk) ExecX(ctx context.Context) {
	if err := mlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
