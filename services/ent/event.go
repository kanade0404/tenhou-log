// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// Event is the model entity for the Event schema.
type Event struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges      EventEdges `json:"edges"`
	turn_event *uuid.UUID
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Turn holds the value of the turn edge.
	Turn *Turn `json:"turn,omitempty"`
	// Win holds the value of the win edge.
	Win []*Win `json:"win,omitempty"`
	// Call holds the value of the call edge.
	Call []*Call `json:"call,omitempty"`
	// Draw holds the value of the draw edge.
	Draw []*Drawn `json:"draw,omitempty"`
	// Reach holds the value of the reach edge.
	Reach []*Reach `json:"reach,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TurnOrErr returns the Turn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) TurnOrErr() (*Turn, error) {
	if e.loadedTypes[0] {
		if e.Turn == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: turn.Label}
		}
		return e.Turn, nil
	}
	return nil, &NotLoadedError{edge: "turn"}
}

// WinOrErr returns the Win value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) WinOrErr() ([]*Win, error) {
	if e.loadedTypes[1] {
		return e.Win, nil
	}
	return nil, &NotLoadedError{edge: "win"}
}

// CallOrErr returns the Call value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) CallOrErr() ([]*Call, error) {
	if e.loadedTypes[2] {
		return e.Call, nil
	}
	return nil, &NotLoadedError{edge: "call"}
}

// DrawOrErr returns the Draw value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) DrawOrErr() ([]*Drawn, error) {
	if e.loadedTypes[3] {
		return e.Draw, nil
	}
	return nil, &NotLoadedError{edge: "draw"}
}

// ReachOrErr returns the Reach value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) ReachOrErr() ([]*Reach, error) {
	if e.loadedTypes[4] {
		return e.Reach, nil
	}
	return nil, &NotLoadedError{edge: "reach"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			values[i] = new(uuid.UUID)
		case event.ForeignKeys[0]: // turn_event
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field turn_event", values[i])
			} else if value.Valid {
				e.turn_event = new(uuid.UUID)
				*e.turn_event = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTurn queries the "turn" edge of the Event entity.
func (e *Event) QueryTurn() *TurnQuery {
	return (&EventClient{config: e.config}).QueryTurn(e)
}

// QueryWin queries the "win" edge of the Event entity.
func (e *Event) QueryWin() *WinQuery {
	return (&EventClient{config: e.config}).QueryWin(e)
}

// QueryCall queries the "call" edge of the Event entity.
func (e *Event) QueryCall() *CallQuery {
	return (&EventClient{config: e.config}).QueryCall(e)
}

// QueryDraw queries the "draw" edge of the Event entity.
func (e *Event) QueryDraw() *DrawnQuery {
	return (&EventClient{config: e.config}).QueryDraw(e)
}

// QueryReach queries the "reach" edge of the Event entity.
func (e *Event) QueryReach() *ReachQuery {
	return (&EventClient{config: e.config}).QueryReach(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
