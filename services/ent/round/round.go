// Code generated by ent, DO NOT EDIT.

package round

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the round type in the database.
	Label = "round"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeHands holds the string denoting the hands edge name in mutations.
	EdgeHands = "hands"
	// EdgeWinds holds the string denoting the winds edge name in mutations.
	EdgeWinds = "winds"
	// Table holds the table name of the round in the database.
	Table = "rounds"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "rounds"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "game_rounds"
	// HandsTable is the table that holds the hands relation/edge.
	HandsTable = "hands"
	// HandsInverseTable is the table name for the Hand entity.
	// It exists in this package in order to avoid circular dependency with the "hand" package.
	HandsInverseTable = "hands"
	// HandsColumn is the table column denoting the hands relation/edge.
	HandsColumn = "round_hands"
	// WindsTable is the table that holds the winds relation/edge.
	WindsTable = "rounds"
	// WindsInverseTable is the table name for the Wind entity.
	// It exists in this package in order to avoid circular dependency with the "wind" package.
	WindsInverseTable = "winds"
	// WindsColumn is the table column denoting the winds relation/edge.
	WindsColumn = "wind_rounds"
)

// Columns holds all SQL columns for round fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rounds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_rounds",
	"wind_rounds",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
