// Code generated by ent, DO NOT EDIT.

package round

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldID, id))
}

// Wind applies equality check predicate on the "wind" field. It's identical to WindEQ.
func Wind(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldWind, v))
}

// WindEQ applies the EQ predicate on the "wind" field.
func WindEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldWind, v))
}

// WindNEQ applies the NEQ predicate on the "wind" field.
func WindNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldWind, v))
}

// WindIn applies the In predicate on the "wind" field.
func WindIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldWind, vs...))
}

// WindNotIn applies the NotIn predicate on the "wind" field.
func WindNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldWind, vs...))
}

// WindGT applies the GT predicate on the "wind" field.
func WindGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldWind, v))
}

// WindGTE applies the GTE predicate on the "wind" field.
func WindGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldWind, v))
}

// WindLT applies the LT predicate on the "wind" field.
func WindLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldWind, v))
}

// WindLTE applies the LTE predicate on the "wind" field.
func WindLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldWind, v))
}

// WindContains applies the Contains predicate on the "wind" field.
func WindContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldWind, v))
}

// WindHasPrefix applies the HasPrefix predicate on the "wind" field.
func WindHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldWind, v))
}

// WindHasSuffix applies the HasSuffix predicate on the "wind" field.
func WindHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldWind, v))
}

// WindEqualFold applies the EqualFold predicate on the "wind" field.
func WindEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldWind, v))
}

// WindContainsFold applies the ContainsFold predicate on the "wind" field.
func WindContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldWind, v))
}

// HasGames applies the HasEdge predicate on the "games" edge.
func HasGames() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGamesWith applies the HasEdge predicate on the "games" edge with a given conditions (other predicates).
func HasGamesWith(preds ...predicate.Game) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GamesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHands applies the HasEdge predicate on the "hands" edge.
func HasHands() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HandsTable, HandsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandsWith applies the HasEdge predicate on the "hands" edge with a given conditions (other predicates).
func HasHandsWith(preds ...predicate.Hand) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HandsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HandsTable, HandsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		p(s.Not())
	})
}
