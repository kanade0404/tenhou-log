// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/dan"
	"github.com/kanade0404/tenhou-log/services/ent/game"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayer"
	"github.com/kanade0404/tenhou-log/services/ent/player"
)

// GamePlayerCreate is the builder for creating a GamePlayer entity.
type GamePlayerCreate struct {
	config
	mutation *GamePlayerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRate sets the "rate" field.
func (gpc *GamePlayerCreate) SetRate(f float64) *GamePlayerCreate {
	gpc.mutation.SetRate(f)
	return gpc
}

// SetStartPosition sets the "start_position" field.
func (gpc *GamePlayerCreate) SetStartPosition(s string) *GamePlayerCreate {
	gpc.mutation.SetStartPosition(s)
	return gpc
}

// SetID sets the "id" field.
func (gpc *GamePlayerCreate) SetID(u uuid.UUID) *GamePlayerCreate {
	gpc.mutation.SetID(u)
	return gpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gpc *GamePlayerCreate) SetNillableID(u *uuid.UUID) *GamePlayerCreate {
	if u != nil {
		gpc.SetID(*u)
	}
	return gpc
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (gpc *GamePlayerCreate) AddGameIDs(ids ...uuid.UUID) *GamePlayerCreate {
	gpc.mutation.AddGameIDs(ids...)
	return gpc
}

// AddGames adds the "games" edges to the Game entity.
func (gpc *GamePlayerCreate) AddGames(g ...*Game) *GamePlayerCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpc.AddGameIDs(ids...)
}

// SetPlayersID sets the "players" edge to the Player entity by ID.
func (gpc *GamePlayerCreate) SetPlayersID(id uuid.UUID) *GamePlayerCreate {
	gpc.mutation.SetPlayersID(id)
	return gpc
}

// SetNillablePlayersID sets the "players" edge to the Player entity by ID if the given value is not nil.
func (gpc *GamePlayerCreate) SetNillablePlayersID(id *uuid.UUID) *GamePlayerCreate {
	if id != nil {
		gpc = gpc.SetPlayersID(*id)
	}
	return gpc
}

// SetPlayers sets the "players" edge to the Player entity.
func (gpc *GamePlayerCreate) SetPlayers(p *Player) *GamePlayerCreate {
	return gpc.SetPlayersID(p.ID)
}

// SetDansID sets the "dans" edge to the Dan entity by ID.
func (gpc *GamePlayerCreate) SetDansID(id uuid.UUID) *GamePlayerCreate {
	gpc.mutation.SetDansID(id)
	return gpc
}

// SetNillableDansID sets the "dans" edge to the Dan entity by ID if the given value is not nil.
func (gpc *GamePlayerCreate) SetNillableDansID(id *uuid.UUID) *GamePlayerCreate {
	if id != nil {
		gpc = gpc.SetDansID(*id)
	}
	return gpc
}

// SetDans sets the "dans" edge to the Dan entity.
func (gpc *GamePlayerCreate) SetDans(d *Dan) *GamePlayerCreate {
	return gpc.SetDansID(d.ID)
}

// Mutation returns the GamePlayerMutation object of the builder.
func (gpc *GamePlayerCreate) Mutation() *GamePlayerMutation {
	return gpc.mutation
}

// Save creates the GamePlayer in the database.
func (gpc *GamePlayerCreate) Save(ctx context.Context) (*GamePlayer, error) {
	var (
		err  error
		node *GamePlayer
	)
	gpc.defaults()
	if len(gpc.hooks) == 0 {
		if err = gpc.check(); err != nil {
			return nil, err
		}
		node, err = gpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GamePlayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gpc.check(); err != nil {
				return nil, err
			}
			gpc.mutation = mutation
			if node, err = gpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gpc.hooks) - 1; i >= 0; i-- {
			if gpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GamePlayer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GamePlayerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GamePlayerCreate) SaveX(ctx context.Context) *GamePlayer {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GamePlayerCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GamePlayerCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GamePlayerCreate) defaults() {
	if _, ok := gpc.mutation.ID(); !ok {
		v := gameplayer.DefaultID()
		gpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GamePlayerCreate) check() error {
	if _, ok := gpc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "GamePlayer.rate"`)}
	}
	if _, ok := gpc.mutation.StartPosition(); !ok {
		return &ValidationError{Name: "start_position", err: errors.New(`ent: missing required field "GamePlayer.start_position"`)}
	}
	if v, ok := gpc.mutation.StartPosition(); ok {
		if err := gameplayer.StartPositionValidator(v); err != nil {
			return &ValidationError{Name: "start_position", err: fmt.Errorf(`ent: validator failed for field "GamePlayer.start_position": %w`, err)}
		}
	}
	return nil
}

func (gpc *GamePlayerCreate) sqlSave(ctx context.Context) (*GamePlayer, error) {
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gpc *GamePlayerCreate) createSpec() (*GamePlayer, *sqlgraph.CreateSpec) {
	var (
		_node = &GamePlayer{config: gpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gameplayer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gameplayer.FieldID,
			},
		}
	)
	_spec.OnConflict = gpc.conflict
	if id, ok := gpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gpc.mutation.Rate(); ok {
		_spec.SetField(gameplayer.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := gpc.mutation.StartPosition(); ok {
		_spec.SetField(gameplayer.FieldStartPosition, field.TypeString, value)
		_node.StartPosition = value
	}
	if nodes := gpc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameplayer.GamesTable,
			Columns: gameplayer.GamesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gpc.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameplayer.PlayersTable,
			Columns: []string{gameplayer.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_game_players = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gpc.mutation.DansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameplayer.DansTable,
			Columns: []string{gameplayer.DansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dan_game_players = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GamePlayer.Create().
//		SetRate(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GamePlayerUpsert) {
//			SetRate(v+v).
//		}).
//		Exec(ctx)
func (gpc *GamePlayerCreate) OnConflict(opts ...sql.ConflictOption) *GamePlayerUpsertOne {
	gpc.conflict = opts
	return &GamePlayerUpsertOne{
		create: gpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpc *GamePlayerCreate) OnConflictColumns(columns ...string) *GamePlayerUpsertOne {
	gpc.conflict = append(gpc.conflict, sql.ConflictColumns(columns...))
	return &GamePlayerUpsertOne{
		create: gpc,
	}
}

type (
	// GamePlayerUpsertOne is the builder for "upsert"-ing
	//  one GamePlayer node.
	GamePlayerUpsertOne struct {
		create *GamePlayerCreate
	}

	// GamePlayerUpsert is the "OnConflict" setter.
	GamePlayerUpsert struct {
		*sql.UpdateSet
	}
)

// SetStartPosition sets the "start_position" field.
func (u *GamePlayerUpsert) SetStartPosition(v string) *GamePlayerUpsert {
	u.Set(gameplayer.FieldStartPosition, v)
	return u
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *GamePlayerUpsert) UpdateStartPosition() *GamePlayerUpsert {
	u.SetExcluded(gameplayer.FieldStartPosition)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameplayer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GamePlayerUpsertOne) UpdateNewValues() *GamePlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gameplayer.FieldID)
		}
		if _, exists := u.create.mutation.Rate(); exists {
			s.SetIgnore(gameplayer.FieldRate)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GamePlayerUpsertOne) Ignore() *GamePlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GamePlayerUpsertOne) DoNothing() *GamePlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GamePlayerCreate.OnConflict
// documentation for more info.
func (u *GamePlayerUpsertOne) Update(set func(*GamePlayerUpsert)) *GamePlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GamePlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartPosition sets the "start_position" field.
func (u *GamePlayerUpsertOne) SetStartPosition(v string) *GamePlayerUpsertOne {
	return u.Update(func(s *GamePlayerUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *GamePlayerUpsertOne) UpdateStartPosition() *GamePlayerUpsertOne {
	return u.Update(func(s *GamePlayerUpsert) {
		s.UpdateStartPosition()
	})
}

// Exec executes the query.
func (u *GamePlayerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GamePlayerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GamePlayerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GamePlayerUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GamePlayerUpsertOne.ID is not supported by MySQL driver. Use GamePlayerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GamePlayerUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GamePlayerCreateBulk is the builder for creating many GamePlayer entities in bulk.
type GamePlayerCreateBulk struct {
	config
	builders []*GamePlayerCreate
	conflict []sql.ConflictOption
}

// Save creates the GamePlayer entities in the database.
func (gpcb *GamePlayerCreateBulk) Save(ctx context.Context) ([]*GamePlayer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GamePlayer, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GamePlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GamePlayerCreateBulk) SaveX(ctx context.Context) []*GamePlayer {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GamePlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GamePlayerCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GamePlayer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GamePlayerUpsert) {
//			SetRate(v+v).
//		}).
//		Exec(ctx)
func (gpcb *GamePlayerCreateBulk) OnConflict(opts ...sql.ConflictOption) *GamePlayerUpsertBulk {
	gpcb.conflict = opts
	return &GamePlayerUpsertBulk{
		create: gpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpcb *GamePlayerCreateBulk) OnConflictColumns(columns ...string) *GamePlayerUpsertBulk {
	gpcb.conflict = append(gpcb.conflict, sql.ConflictColumns(columns...))
	return &GamePlayerUpsertBulk{
		create: gpcb,
	}
}

// GamePlayerUpsertBulk is the builder for "upsert"-ing
// a bulk of GamePlayer nodes.
type GamePlayerUpsertBulk struct {
	create *GamePlayerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameplayer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GamePlayerUpsertBulk) UpdateNewValues() *GamePlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gameplayer.FieldID)
			}
			if _, exists := b.mutation.Rate(); exists {
				s.SetIgnore(gameplayer.FieldRate)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GamePlayer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GamePlayerUpsertBulk) Ignore() *GamePlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GamePlayerUpsertBulk) DoNothing() *GamePlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GamePlayerCreateBulk.OnConflict
// documentation for more info.
func (u *GamePlayerUpsertBulk) Update(set func(*GamePlayerUpsert)) *GamePlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GamePlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartPosition sets the "start_position" field.
func (u *GamePlayerUpsertBulk) SetStartPosition(v string) *GamePlayerUpsertBulk {
	return u.Update(func(s *GamePlayerUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *GamePlayerUpsertBulk) UpdateStartPosition() *GamePlayerUpsertBulk {
	return u.Update(func(s *GamePlayerUpsert) {
		s.UpdateStartPosition()
	})
}

// Exec executes the query.
func (u *GamePlayerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GamePlayerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GamePlayerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GamePlayerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
