// Code generated by ent, DO NOT EDIT.

package turn

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNum), v))
	})
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...uint) predicate.Turn {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNum), v...))
	})
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...uint) predicate.Turn {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNum), v...))
	})
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNum), v))
	})
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNum), v))
	})
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNum), v))
	})
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v uint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNum), v))
	})
}

// HasHands applies the HasEdge predicate on the "hands" edge.
func HasHands() predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HandsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, HandsTable, HandsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandsWith applies the HasEdge predicate on the "hands" edge with a given conditions (other predicates).
func HasHandsWith(preds ...predicate.Hand) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HandsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, HandsTable, HandsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGamePlayerPoints applies the HasEdge predicate on the "game_player_points" edge.
func HasGamePlayerPoints() predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GamePlayerPointsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GamePlayerPointsTable, GamePlayerPointsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGamePlayerPointsWith applies the HasEdge predicate on the "game_player_points" edge with a given conditions (other predicates).
func HasGamePlayerPointsWith(preds ...predicate.GamePlayerPoint) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GamePlayerPointsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GamePlayerPointsTable, GamePlayerPointsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameplayerhandhai applies the HasEdge predicate on the "gameplayerhandhai" edge.
func HasGameplayerhandhai() predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameplayerhandhaiTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GameplayerhandhaiTable, GameplayerhandhaiColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameplayerhandhaiWith applies the HasEdge predicate on the "gameplayerhandhai" edge with a given conditions (other predicates).
func HasGameplayerhandhaiWith(preds ...predicate.GamePlayerHandHai) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameplayerhandhaiInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GameplayerhandhaiTable, GameplayerhandhaiColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Turn) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Turn) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Turn) predicate.Turn {
	return predicate.Turn(func(s *sql.Selector) {
		p(s.Not())
	})
}
