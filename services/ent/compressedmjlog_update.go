// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// CompressedMJLogUpdate is the builder for updating CompressedMJLog entities.
type CompressedMJLogUpdate struct {
	config
	hooks    []Hook
	mutation *CompressedMJLogMutation
}

// Where appends a list predicates to the CompressedMJLogUpdate builder.
func (cmlu *CompressedMJLogUpdate) Where(ps ...predicate.CompressedMJLog) *CompressedMJLogUpdate {
	cmlu.mutation.Where(ps...)
	return cmlu
}

// SetSize sets the "size" field.
func (cmlu *CompressedMJLogUpdate) SetSize(u uint) *CompressedMJLogUpdate {
	cmlu.mutation.ResetSize()
	cmlu.mutation.SetSize(u)
	return cmlu
}

// AddSize adds u to the "size" field.
func (cmlu *CompressedMJLogUpdate) AddSize(u int) *CompressedMJLogUpdate {
	cmlu.mutation.AddSize(u)
	return cmlu
}

// SetMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID.
func (cmlu *CompressedMJLogUpdate) SetMjlogFilesID(id uuid.UUID) *CompressedMJLogUpdate {
	cmlu.mutation.SetMjlogFilesID(id)
	return cmlu
}

// SetNillableMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID if the given value is not nil.
func (cmlu *CompressedMJLogUpdate) SetNillableMjlogFilesID(id *uuid.UUID) *CompressedMJLogUpdate {
	if id != nil {
		cmlu = cmlu.SetMjlogFilesID(*id)
	}
	return cmlu
}

// SetMjlogFiles sets the "mjlog_files" edge to the MJLogFile entity.
func (cmlu *CompressedMJLogUpdate) SetMjlogFiles(m *MJLogFile) *CompressedMJLogUpdate {
	return cmlu.SetMjlogFilesID(m.ID)
}

// Mutation returns the CompressedMJLogMutation object of the builder.
func (cmlu *CompressedMJLogUpdate) Mutation() *CompressedMJLogMutation {
	return cmlu.mutation
}

// ClearMjlogFiles clears the "mjlog_files" edge to the MJLogFile entity.
func (cmlu *CompressedMJLogUpdate) ClearMjlogFiles() *CompressedMJLogUpdate {
	cmlu.mutation.ClearMjlogFiles()
	return cmlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmlu *CompressedMJLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CompressedMJLogMutation](ctx, cmlu.sqlSave, cmlu.mutation, cmlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmlu *CompressedMJLogUpdate) SaveX(ctx context.Context) int {
	affected, err := cmlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmlu *CompressedMJLogUpdate) Exec(ctx context.Context) error {
	_, err := cmlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmlu *CompressedMJLogUpdate) ExecX(ctx context.Context) {
	if err := cmlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmlu *CompressedMJLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compressedmjlog.Table,
			Columns: compressedmjlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: compressedmjlog.FieldID,
			},
		},
	}
	if ps := cmlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmlu.mutation.Size(); ok {
		_spec.SetField(compressedmjlog.FieldSize, field.TypeUint, value)
	}
	if value, ok := cmlu.mutation.AddedSize(); ok {
		_spec.AddField(compressedmjlog.FieldSize, field.TypeUint, value)
	}
	if cmlu.mutation.MjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   compressedmjlog.MjlogFilesTable,
			Columns: []string{compressedmjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlogfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmlu.mutation.MjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   compressedmjlog.MjlogFilesTable,
			Columns: []string{compressedmjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlogfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compressedmjlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmlu.mutation.done = true
	return n, nil
}

// CompressedMJLogUpdateOne is the builder for updating a single CompressedMJLog entity.
type CompressedMJLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompressedMJLogMutation
}

// SetSize sets the "size" field.
func (cmluo *CompressedMJLogUpdateOne) SetSize(u uint) *CompressedMJLogUpdateOne {
	cmluo.mutation.ResetSize()
	cmluo.mutation.SetSize(u)
	return cmluo
}

// AddSize adds u to the "size" field.
func (cmluo *CompressedMJLogUpdateOne) AddSize(u int) *CompressedMJLogUpdateOne {
	cmluo.mutation.AddSize(u)
	return cmluo
}

// SetMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID.
func (cmluo *CompressedMJLogUpdateOne) SetMjlogFilesID(id uuid.UUID) *CompressedMJLogUpdateOne {
	cmluo.mutation.SetMjlogFilesID(id)
	return cmluo
}

// SetNillableMjlogFilesID sets the "mjlog_files" edge to the MJLogFile entity by ID if the given value is not nil.
func (cmluo *CompressedMJLogUpdateOne) SetNillableMjlogFilesID(id *uuid.UUID) *CompressedMJLogUpdateOne {
	if id != nil {
		cmluo = cmluo.SetMjlogFilesID(*id)
	}
	return cmluo
}

// SetMjlogFiles sets the "mjlog_files" edge to the MJLogFile entity.
func (cmluo *CompressedMJLogUpdateOne) SetMjlogFiles(m *MJLogFile) *CompressedMJLogUpdateOne {
	return cmluo.SetMjlogFilesID(m.ID)
}

// Mutation returns the CompressedMJLogMutation object of the builder.
func (cmluo *CompressedMJLogUpdateOne) Mutation() *CompressedMJLogMutation {
	return cmluo.mutation
}

// ClearMjlogFiles clears the "mjlog_files" edge to the MJLogFile entity.
func (cmluo *CompressedMJLogUpdateOne) ClearMjlogFiles() *CompressedMJLogUpdateOne {
	cmluo.mutation.ClearMjlogFiles()
	return cmluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmluo *CompressedMJLogUpdateOne) Select(field string, fields ...string) *CompressedMJLogUpdateOne {
	cmluo.fields = append([]string{field}, fields...)
	return cmluo
}

// Save executes the query and returns the updated CompressedMJLog entity.
func (cmluo *CompressedMJLogUpdateOne) Save(ctx context.Context) (*CompressedMJLog, error) {
	return withHooks[*CompressedMJLog, CompressedMJLogMutation](ctx, cmluo.sqlSave, cmluo.mutation, cmluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmluo *CompressedMJLogUpdateOne) SaveX(ctx context.Context) *CompressedMJLog {
	node, err := cmluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmluo *CompressedMJLogUpdateOne) Exec(ctx context.Context) error {
	_, err := cmluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmluo *CompressedMJLogUpdateOne) ExecX(ctx context.Context) {
	if err := cmluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmluo *CompressedMJLogUpdateOne) sqlSave(ctx context.Context) (_node *CompressedMJLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compressedmjlog.Table,
			Columns: compressedmjlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: compressedmjlog.FieldID,
			},
		},
	}
	id, ok := cmluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompressedMJLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, compressedmjlog.FieldID)
		for _, f := range fields {
			if !compressedmjlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != compressedmjlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmluo.mutation.Size(); ok {
		_spec.SetField(compressedmjlog.FieldSize, field.TypeUint, value)
	}
	if value, ok := cmluo.mutation.AddedSize(); ok {
		_spec.AddField(compressedmjlog.FieldSize, field.TypeUint, value)
	}
	if cmluo.mutation.MjlogFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   compressedmjlog.MjlogFilesTable,
			Columns: []string{compressedmjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlogfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmluo.mutation.MjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   compressedmjlog.MjlogFilesTable,
			Columns: []string{compressedmjlog.MjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlogfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompressedMJLog{config: cmluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compressedmjlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmluo.mutation.done = true
	return _node, nil
}
