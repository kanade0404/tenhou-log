// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// GamePlayerHandHaiUpdate is the builder for updating GamePlayerHandHai entities.
type GamePlayerHandHaiUpdate struct {
	config
	hooks    []Hook
	mutation *GamePlayerHandHaiMutation
}

// Where appends a list predicates to the GamePlayerHandHaiUpdate builder.
func (gphhu *GamePlayerHandHaiUpdate) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiUpdate {
	gphhu.mutation.Where(ps...)
	return gphhu
}

// SetTurnID sets the "turn" edge to the Turn entity by ID.
func (gphhu *GamePlayerHandHaiUpdate) SetTurnID(id uuid.UUID) *GamePlayerHandHaiUpdate {
	gphhu.mutation.SetTurnID(id)
	return gphhu
}

// SetTurn sets the "turn" edge to the Turn entity.
func (gphhu *GamePlayerHandHaiUpdate) SetTurn(t *Turn) *GamePlayerHandHaiUpdate {
	return gphhu.SetTurnID(t.ID)
}

// Mutation returns the GamePlayerHandHaiMutation object of the builder.
func (gphhu *GamePlayerHandHaiUpdate) Mutation() *GamePlayerHandHaiMutation {
	return gphhu.mutation
}

// ClearTurn clears the "turn" edge to the Turn entity.
func (gphhu *GamePlayerHandHaiUpdate) ClearTurn() *GamePlayerHandHaiUpdate {
	gphhu.mutation.ClearTurn()
	return gphhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gphhu *GamePlayerHandHaiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GamePlayerHandHaiMutation](ctx, gphhu.sqlSave, gphhu.mutation, gphhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gphhu *GamePlayerHandHaiUpdate) SaveX(ctx context.Context) int {
	affected, err := gphhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gphhu *GamePlayerHandHaiUpdate) Exec(ctx context.Context) error {
	_, err := gphhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhu *GamePlayerHandHaiUpdate) ExecX(ctx context.Context) {
	if err := gphhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gphhu *GamePlayerHandHaiUpdate) check() error {
	if _, ok := gphhu.mutation.TurnID(); gphhu.mutation.TurnCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GamePlayerHandHai.turn"`)
	}
	return nil
}

func (gphhu *GamePlayerHandHaiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gphhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameplayerhandhai.Table, gameplayerhandhai.Columns, sqlgraph.NewFieldSpec(gameplayerhandhai.FieldID, field.TypeUUID))
	if ps := gphhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gphhu.mutation.TurnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gameplayerhandhai.TurnTable,
			Columns: []string{gameplayerhandhai.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphhu.mutation.TurnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gameplayerhandhai.TurnTable,
			Columns: []string{gameplayerhandhai.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gphhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayerhandhai.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gphhu.mutation.done = true
	return n, nil
}

// GamePlayerHandHaiUpdateOne is the builder for updating a single GamePlayerHandHai entity.
type GamePlayerHandHaiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GamePlayerHandHaiMutation
}

// SetTurnID sets the "turn" edge to the Turn entity by ID.
func (gphhuo *GamePlayerHandHaiUpdateOne) SetTurnID(id uuid.UUID) *GamePlayerHandHaiUpdateOne {
	gphhuo.mutation.SetTurnID(id)
	return gphhuo
}

// SetTurn sets the "turn" edge to the Turn entity.
func (gphhuo *GamePlayerHandHaiUpdateOne) SetTurn(t *Turn) *GamePlayerHandHaiUpdateOne {
	return gphhuo.SetTurnID(t.ID)
}

// Mutation returns the GamePlayerHandHaiMutation object of the builder.
func (gphhuo *GamePlayerHandHaiUpdateOne) Mutation() *GamePlayerHandHaiMutation {
	return gphhuo.mutation
}

// ClearTurn clears the "turn" edge to the Turn entity.
func (gphhuo *GamePlayerHandHaiUpdateOne) ClearTurn() *GamePlayerHandHaiUpdateOne {
	gphhuo.mutation.ClearTurn()
	return gphhuo
}

// Where appends a list predicates to the GamePlayerHandHaiUpdate builder.
func (gphhuo *GamePlayerHandHaiUpdateOne) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiUpdateOne {
	gphhuo.mutation.Where(ps...)
	return gphhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gphhuo *GamePlayerHandHaiUpdateOne) Select(field string, fields ...string) *GamePlayerHandHaiUpdateOne {
	gphhuo.fields = append([]string{field}, fields...)
	return gphhuo
}

// Save executes the query and returns the updated GamePlayerHandHai entity.
func (gphhuo *GamePlayerHandHaiUpdateOne) Save(ctx context.Context) (*GamePlayerHandHai, error) {
	return withHooks[*GamePlayerHandHai, GamePlayerHandHaiMutation](ctx, gphhuo.sqlSave, gphhuo.mutation, gphhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gphhuo *GamePlayerHandHaiUpdateOne) SaveX(ctx context.Context) *GamePlayerHandHai {
	node, err := gphhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gphhuo *GamePlayerHandHaiUpdateOne) Exec(ctx context.Context) error {
	_, err := gphhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphhuo *GamePlayerHandHaiUpdateOne) ExecX(ctx context.Context) {
	if err := gphhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gphhuo *GamePlayerHandHaiUpdateOne) check() error {
	if _, ok := gphhuo.mutation.TurnID(); gphhuo.mutation.TurnCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GamePlayerHandHai.turn"`)
	}
	return nil
}

func (gphhuo *GamePlayerHandHaiUpdateOne) sqlSave(ctx context.Context) (_node *GamePlayerHandHai, err error) {
	if err := gphhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameplayerhandhai.Table, gameplayerhandhai.Columns, sqlgraph.NewFieldSpec(gameplayerhandhai.FieldID, field.TypeUUID))
	id, ok := gphhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GamePlayerHandHai.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gphhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayerhandhai.FieldID)
		for _, f := range fields {
			if !gameplayerhandhai.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameplayerhandhai.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gphhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gphhuo.mutation.TurnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gameplayerhandhai.TurnTable,
			Columns: []string{gameplayerhandhai.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphhuo.mutation.TurnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gameplayerhandhai.TurnTable,
			Columns: []string{gameplayerhandhai.TurnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GamePlayerHandHai{config: gphhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gphhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayerhandhai.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gphhuo.mutation.done = true
	return _node, nil
}
