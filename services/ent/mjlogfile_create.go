// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfile"
)

// MJLogFileCreate is the builder for creating a MJLogFile entity.
type MJLogFileCreate struct {
	config
	mutation *MJLogFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mlfc *MJLogFileCreate) SetName(s string) *MJLogFileCreate {
	mlfc.mutation.SetName(s)
	return mlfc
}

// SetID sets the "id" field.
func (mlfc *MJLogFileCreate) SetID(u uuid.UUID) *MJLogFileCreate {
	mlfc.mutation.SetID(u)
	return mlfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlfc *MJLogFileCreate) SetNillableID(u *uuid.UUID) *MJLogFileCreate {
	if u != nil {
		mlfc.SetID(*u)
	}
	return mlfc
}

// SetCompressedMjlogFilesID sets the "compressed_mjlog_files" edge to the CompressedMJLog entity by ID.
func (mlfc *MJLogFileCreate) SetCompressedMjlogFilesID(id uuid.UUID) *MJLogFileCreate {
	mlfc.mutation.SetCompressedMjlogFilesID(id)
	return mlfc
}

// SetCompressedMjlogFiles sets the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfc *MJLogFileCreate) SetCompressedMjlogFiles(c *CompressedMJLog) *MJLogFileCreate {
	return mlfc.SetCompressedMjlogFilesID(c.ID)
}

// SetMjlogsID sets the "mjlogs" edge to the MJLog entity by ID.
func (mlfc *MJLogFileCreate) SetMjlogsID(id uuid.UUID) *MJLogFileCreate {
	mlfc.mutation.SetMjlogsID(id)
	return mlfc
}

// SetNillableMjlogsID sets the "mjlogs" edge to the MJLog entity by ID if the given value is not nil.
func (mlfc *MJLogFileCreate) SetNillableMjlogsID(id *uuid.UUID) *MJLogFileCreate {
	if id != nil {
		mlfc = mlfc.SetMjlogsID(*id)
	}
	return mlfc
}

// SetMjlogs sets the "mjlogs" edge to the MJLog entity.
func (mlfc *MJLogFileCreate) SetMjlogs(m *MJLog) *MJLogFileCreate {
	return mlfc.SetMjlogsID(m.ID)
}

// Mutation returns the MJLogFileMutation object of the builder.
func (mlfc *MJLogFileCreate) Mutation() *MJLogFileMutation {
	return mlfc.mutation
}

// Save creates the MJLogFile in the database.
func (mlfc *MJLogFileCreate) Save(ctx context.Context) (*MJLogFile, error) {
	var (
		err  error
		node *MJLogFile
	)
	mlfc.defaults()
	if len(mlfc.hooks) == 0 {
		if err = mlfc.check(); err != nil {
			return nil, err
		}
		node, err = mlfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MJLogFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mlfc.check(); err != nil {
				return nil, err
			}
			mlfc.mutation = mutation
			if node, err = mlfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mlfc.hooks) - 1; i >= 0; i-- {
			if mlfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mlfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MJLogFile)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MJLogFileMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mlfc *MJLogFileCreate) SaveX(ctx context.Context) *MJLogFile {
	v, err := mlfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlfc *MJLogFileCreate) Exec(ctx context.Context) error {
	_, err := mlfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfc *MJLogFileCreate) ExecX(ctx context.Context) {
	if err := mlfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlfc *MJLogFileCreate) defaults() {
	if _, ok := mlfc.mutation.ID(); !ok {
		v := mjlogfile.DefaultID()
		mlfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlfc *MJLogFileCreate) check() error {
	if _, ok := mlfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MJLogFile.name"`)}
	}
	if _, ok := mlfc.mutation.CompressedMjlogFilesID(); !ok {
		return &ValidationError{Name: "compressed_mjlog_files", err: errors.New(`ent: missing required edge "MJLogFile.compressed_mjlog_files"`)}
	}
	return nil
}

func (mlfc *MJLogFileCreate) sqlSave(ctx context.Context) (*MJLogFile, error) {
	_node, _spec := mlfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mlfc *MJLogFileCreate) createSpec() (*MJLogFile, *sqlgraph.CreateSpec) {
	var (
		_node = &MJLogFile{config: mlfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mjlogfile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlogfile.FieldID,
			},
		}
	)
	_spec.OnConflict = mlfc.conflict
	if id, ok := mlfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mlfc.mutation.Name(); ok {
		_spec.SetField(mjlogfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := mlfc.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mjlogfile.CompressedMjlogFilesTable,
			Columns: []string{mjlogfile.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.compressed_mj_log_mjlog_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mlfc.mutation.MjlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfile.MjlogsTable,
			Columns: []string{mjlogfile.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MJLogFile.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MJLogFileUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mlfc *MJLogFileCreate) OnConflict(opts ...sql.ConflictOption) *MJLogFileUpsertOne {
	mlfc.conflict = opts
	return &MJLogFileUpsertOne{
		create: mlfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlfc *MJLogFileCreate) OnConflictColumns(columns ...string) *MJLogFileUpsertOne {
	mlfc.conflict = append(mlfc.conflict, sql.ConflictColumns(columns...))
	return &MJLogFileUpsertOne{
		create: mlfc,
	}
}

type (
	// MJLogFileUpsertOne is the builder for "upsert"-ing
	//  one MJLogFile node.
	MJLogFileUpsertOne struct {
		create *MJLogFileCreate
	}

	// MJLogFileUpsert is the "OnConflict" setter.
	MJLogFileUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mjlogfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MJLogFileUpsertOne) UpdateNewValues() *MJLogFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mjlogfile.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(mjlogfile.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MJLogFileUpsertOne) Ignore() *MJLogFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MJLogFileUpsertOne) DoNothing() *MJLogFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MJLogFileCreate.OnConflict
// documentation for more info.
func (u *MJLogFileUpsertOne) Update(set func(*MJLogFileUpsert)) *MJLogFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MJLogFileUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *MJLogFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MJLogFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MJLogFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MJLogFileUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MJLogFileUpsertOne.ID is not supported by MySQL driver. Use MJLogFileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MJLogFileUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MJLogFileCreateBulk is the builder for creating many MJLogFile entities in bulk.
type MJLogFileCreateBulk struct {
	config
	builders []*MJLogFileCreate
	conflict []sql.ConflictOption
}

// Save creates the MJLogFile entities in the database.
func (mlfcb *MJLogFileCreateBulk) Save(ctx context.Context) ([]*MJLogFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mlfcb.builders))
	nodes := make([]*MJLogFile, len(mlfcb.builders))
	mutators := make([]Mutator, len(mlfcb.builders))
	for i := range mlfcb.builders {
		func(i int, root context.Context) {
			builder := mlfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MJLogFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlfcb *MJLogFileCreateBulk) SaveX(ctx context.Context) []*MJLogFile {
	v, err := mlfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlfcb *MJLogFileCreateBulk) Exec(ctx context.Context) error {
	_, err := mlfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfcb *MJLogFileCreateBulk) ExecX(ctx context.Context) {
	if err := mlfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MJLogFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MJLogFileUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mlfcb *MJLogFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *MJLogFileUpsertBulk {
	mlfcb.conflict = opts
	return &MJLogFileUpsertBulk{
		create: mlfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlfcb *MJLogFileCreateBulk) OnConflictColumns(columns ...string) *MJLogFileUpsertBulk {
	mlfcb.conflict = append(mlfcb.conflict, sql.ConflictColumns(columns...))
	return &MJLogFileUpsertBulk{
		create: mlfcb,
	}
}

// MJLogFileUpsertBulk is the builder for "upsert"-ing
// a bulk of MJLogFile nodes.
type MJLogFileUpsertBulk struct {
	create *MJLogFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mjlogfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MJLogFileUpsertBulk) UpdateNewValues() *MJLogFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mjlogfile.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(mjlogfile.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MJLogFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MJLogFileUpsertBulk) Ignore() *MJLogFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MJLogFileUpsertBulk) DoNothing() *MJLogFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MJLogFileCreateBulk.OnConflict
// documentation for more info.
func (u *MJLogFileUpsertBulk) Update(set func(*MJLogFileUpsert)) *MJLogFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MJLogFileUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *MJLogFileUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MJLogFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MJLogFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MJLogFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
