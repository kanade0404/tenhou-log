// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/game"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayer"
	"github.com/kanade0404/tenhou-log/services/ent/mjlog"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/room"
	"github.com/kanade0404/tenhou-log/services/ent/round"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetMjlogsID sets the "mjlogs" edge to the MJLog entity by ID.
func (gu *GameUpdate) SetMjlogsID(id uuid.UUID) *GameUpdate {
	gu.mutation.SetMjlogsID(id)
	return gu
}

// SetNillableMjlogsID sets the "mjlogs" edge to the MJLog entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableMjlogsID(id *uuid.UUID) *GameUpdate {
	if id != nil {
		gu = gu.SetMjlogsID(*id)
	}
	return gu
}

// SetMjlogs sets the "mjlogs" edge to the MJLog entity.
func (gu *GameUpdate) SetMjlogs(m *MJLog) *GameUpdate {
	return gu.SetMjlogsID(m.ID)
}

// AddGamePlayerIDs adds the "game_players" edge to the GamePlayer entity by IDs.
func (gu *GameUpdate) AddGamePlayerIDs(ids ...uuid.UUID) *GameUpdate {
	gu.mutation.AddGamePlayerIDs(ids...)
	return gu
}

// AddGamePlayers adds the "game_players" edges to the GamePlayer entity.
func (gu *GameUpdate) AddGamePlayers(g ...*GamePlayer) *GameUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGamePlayerIDs(ids...)
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (gu *GameUpdate) SetRoomsID(id uuid.UUID) *GameUpdate {
	gu.mutation.SetRoomsID(id)
	return gu
}

// SetNillableRoomsID sets the "rooms" edge to the Room entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableRoomsID(id *uuid.UUID) *GameUpdate {
	if id != nil {
		gu = gu.SetRoomsID(*id)
	}
	return gu
}

// SetRooms sets the "rooms" edge to the Room entity.
func (gu *GameUpdate) SetRooms(r *Room) *GameUpdate {
	return gu.SetRoomsID(r.ID)
}

// AddRoundIDs adds the "rounds" edge to the Round entity by IDs.
func (gu *GameUpdate) AddRoundIDs(ids ...uuid.UUID) *GameUpdate {
	gu.mutation.AddRoundIDs(ids...)
	return gu
}

// AddRounds adds the "rounds" edges to the Round entity.
func (gu *GameUpdate) AddRounds(r ...*Round) *GameUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.AddRoundIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearMjlogs clears the "mjlogs" edge to the MJLog entity.
func (gu *GameUpdate) ClearMjlogs() *GameUpdate {
	gu.mutation.ClearMjlogs()
	return gu
}

// ClearGamePlayers clears all "game_players" edges to the GamePlayer entity.
func (gu *GameUpdate) ClearGamePlayers() *GameUpdate {
	gu.mutation.ClearGamePlayers()
	return gu
}

// RemoveGamePlayerIDs removes the "game_players" edge to GamePlayer entities by IDs.
func (gu *GameUpdate) RemoveGamePlayerIDs(ids ...uuid.UUID) *GameUpdate {
	gu.mutation.RemoveGamePlayerIDs(ids...)
	return gu
}

// RemoveGamePlayers removes "game_players" edges to GamePlayer entities.
func (gu *GameUpdate) RemoveGamePlayers(g ...*GamePlayer) *GameUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGamePlayerIDs(ids...)
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (gu *GameUpdate) ClearRooms() *GameUpdate {
	gu.mutation.ClearRooms()
	return gu
}

// ClearRounds clears all "rounds" edges to the Round entity.
func (gu *GameUpdate) ClearRounds() *GameUpdate {
	gu.mutation.ClearRounds()
	return gu
}

// RemoveRoundIDs removes the "rounds" edge to Round entities by IDs.
func (gu *GameUpdate) RemoveRoundIDs(ids ...uuid.UUID) *GameUpdate {
	gu.mutation.RemoveRoundIDs(ids...)
	return gu
}

// RemoveRounds removes "rounds" edges to Round entities.
func (gu *GameUpdate) RemoveRounds(r ...*Round) *GameUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return gu.RemoveRoundIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GameMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: game.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gu.mutation.MjlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   game.MjlogsTable,
			Columns: []string{game.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MjlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   game.MjlogsTable,
			Columns: []string{game.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGamePlayersIDs(); len(nodes) > 0 && !gu.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GamePlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.RoomsTable,
			Columns: []string{game.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.RoomsTable,
			Columns: []string{game.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedRoundsIDs(); len(nodes) > 0 && !gu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetMjlogsID sets the "mjlogs" edge to the MJLog entity by ID.
func (guo *GameUpdateOne) SetMjlogsID(id uuid.UUID) *GameUpdateOne {
	guo.mutation.SetMjlogsID(id)
	return guo
}

// SetNillableMjlogsID sets the "mjlogs" edge to the MJLog entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableMjlogsID(id *uuid.UUID) *GameUpdateOne {
	if id != nil {
		guo = guo.SetMjlogsID(*id)
	}
	return guo
}

// SetMjlogs sets the "mjlogs" edge to the MJLog entity.
func (guo *GameUpdateOne) SetMjlogs(m *MJLog) *GameUpdateOne {
	return guo.SetMjlogsID(m.ID)
}

// AddGamePlayerIDs adds the "game_players" edge to the GamePlayer entity by IDs.
func (guo *GameUpdateOne) AddGamePlayerIDs(ids ...uuid.UUID) *GameUpdateOne {
	guo.mutation.AddGamePlayerIDs(ids...)
	return guo
}

// AddGamePlayers adds the "game_players" edges to the GamePlayer entity.
func (guo *GameUpdateOne) AddGamePlayers(g ...*GamePlayer) *GameUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGamePlayerIDs(ids...)
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (guo *GameUpdateOne) SetRoomsID(id uuid.UUID) *GameUpdateOne {
	guo.mutation.SetRoomsID(id)
	return guo
}

// SetNillableRoomsID sets the "rooms" edge to the Room entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableRoomsID(id *uuid.UUID) *GameUpdateOne {
	if id != nil {
		guo = guo.SetRoomsID(*id)
	}
	return guo
}

// SetRooms sets the "rooms" edge to the Room entity.
func (guo *GameUpdateOne) SetRooms(r *Room) *GameUpdateOne {
	return guo.SetRoomsID(r.ID)
}

// AddRoundIDs adds the "rounds" edge to the Round entity by IDs.
func (guo *GameUpdateOne) AddRoundIDs(ids ...uuid.UUID) *GameUpdateOne {
	guo.mutation.AddRoundIDs(ids...)
	return guo
}

// AddRounds adds the "rounds" edges to the Round entity.
func (guo *GameUpdateOne) AddRounds(r ...*Round) *GameUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.AddRoundIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearMjlogs clears the "mjlogs" edge to the MJLog entity.
func (guo *GameUpdateOne) ClearMjlogs() *GameUpdateOne {
	guo.mutation.ClearMjlogs()
	return guo
}

// ClearGamePlayers clears all "game_players" edges to the GamePlayer entity.
func (guo *GameUpdateOne) ClearGamePlayers() *GameUpdateOne {
	guo.mutation.ClearGamePlayers()
	return guo
}

// RemoveGamePlayerIDs removes the "game_players" edge to GamePlayer entities by IDs.
func (guo *GameUpdateOne) RemoveGamePlayerIDs(ids ...uuid.UUID) *GameUpdateOne {
	guo.mutation.RemoveGamePlayerIDs(ids...)
	return guo
}

// RemoveGamePlayers removes "game_players" edges to GamePlayer entities.
func (guo *GameUpdateOne) RemoveGamePlayers(g ...*GamePlayer) *GameUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGamePlayerIDs(ids...)
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (guo *GameUpdateOne) ClearRooms() *GameUpdateOne {
	guo.mutation.ClearRooms()
	return guo
}

// ClearRounds clears all "rounds" edges to the Round entity.
func (guo *GameUpdateOne) ClearRounds() *GameUpdateOne {
	guo.mutation.ClearRounds()
	return guo
}

// RemoveRoundIDs removes the "rounds" edge to Round entities by IDs.
func (guo *GameUpdateOne) RemoveRoundIDs(ids ...uuid.UUID) *GameUpdateOne {
	guo.mutation.RemoveRoundIDs(ids...)
	return guo
}

// RemoveRounds removes "rounds" edges to Round entities.
func (guo *GameUpdateOne) RemoveRounds(r ...*Round) *GameUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return guo.RemoveRoundIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	return withHooks[*Game, GameMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: game.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if guo.mutation.MjlogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   game.MjlogsTable,
			Columns: []string{game.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MjlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   game.MjlogsTable,
			Columns: []string{game.MjlogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGamePlayersIDs(); len(nodes) > 0 && !guo.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GamePlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   game.GamePlayersTable,
			Columns: game.GamePlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.RoomsTable,
			Columns: []string{game.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.RoomsTable,
			Columns: []string{game.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedRoundsIDs(); len(nodes) > 0 && !guo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.RoundsTable,
			Columns: []string{game.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: round.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
