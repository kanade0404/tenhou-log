// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerpoint"
	"github.com/kanade0404/tenhou-log/services/ent/hand"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// TurnCreate is the builder for creating a Turn entity.
type TurnCreate struct {
	config
	mutation *TurnMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNum sets the "num" field.
func (tc *TurnCreate) SetNum(u uint) *TurnCreate {
	tc.mutation.SetNum(u)
	return tc
}

// SetID sets the "id" field.
func (tc *TurnCreate) SetID(u uuid.UUID) *TurnCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TurnCreate) SetNillableID(u *uuid.UUID) *TurnCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddHandIDs adds the "hands" edge to the Hand entity by IDs.
func (tc *TurnCreate) AddHandIDs(ids ...uuid.UUID) *TurnCreate {
	tc.mutation.AddHandIDs(ids...)
	return tc
}

// AddHands adds the "hands" edges to the Hand entity.
func (tc *TurnCreate) AddHands(h ...*Hand) *TurnCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tc.AddHandIDs(ids...)
}

// AddGamePlayerPointIDs adds the "game_player_points" edge to the GamePlayerPoint entity by IDs.
func (tc *TurnCreate) AddGamePlayerPointIDs(ids ...uuid.UUID) *TurnCreate {
	tc.mutation.AddGamePlayerPointIDs(ids...)
	return tc
}

// AddGamePlayerPoints adds the "game_player_points" edges to the GamePlayerPoint entity.
func (tc *TurnCreate) AddGamePlayerPoints(g ...*GamePlayerPoint) *TurnCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tc.AddGamePlayerPointIDs(ids...)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (tc *TurnCreate) SetEventID(id uuid.UUID) *TurnCreate {
	tc.mutation.SetEventID(id)
	return tc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (tc *TurnCreate) SetNillableEventID(id *uuid.UUID) *TurnCreate {
	if id != nil {
		tc = tc.SetEventID(*id)
	}
	return tc
}

// SetEvent sets the "event" edge to the Event entity.
func (tc *TurnCreate) SetEvent(e *Event) *TurnCreate {
	return tc.SetEventID(e.ID)
}

// SetGameplayerhandhaiID sets the "gameplayerhandhai" edge to the GamePlayerHandHai entity by ID.
func (tc *TurnCreate) SetGameplayerhandhaiID(id uuid.UUID) *TurnCreate {
	tc.mutation.SetGameplayerhandhaiID(id)
	return tc
}

// SetNillableGameplayerhandhaiID sets the "gameplayerhandhai" edge to the GamePlayerHandHai entity by ID if the given value is not nil.
func (tc *TurnCreate) SetNillableGameplayerhandhaiID(id *uuid.UUID) *TurnCreate {
	if id != nil {
		tc = tc.SetGameplayerhandhaiID(*id)
	}
	return tc
}

// SetGameplayerhandhai sets the "gameplayerhandhai" edge to the GamePlayerHandHai entity.
func (tc *TurnCreate) SetGameplayerhandhai(g *GamePlayerHandHai) *TurnCreate {
	return tc.SetGameplayerhandhaiID(g.ID)
}

// Mutation returns the TurnMutation object of the builder.
func (tc *TurnCreate) Mutation() *TurnMutation {
	return tc.mutation
}

// Save creates the Turn in the database.
func (tc *TurnCreate) Save(ctx context.Context) (*Turn, error) {
	tc.defaults()
	return withHooks[*Turn, TurnMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TurnCreate) SaveX(ctx context.Context) *Turn {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TurnCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TurnCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TurnCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := turn.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TurnCreate) check() error {
	if _, ok := tc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Turn.num"`)}
	}
	return nil
}

func (tc *TurnCreate) sqlSave(ctx context.Context) (*Turn, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TurnCreate) createSpec() (*Turn, *sqlgraph.CreateSpec) {
	var (
		_node = &Turn{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(turn.Table, sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Num(); ok {
		_spec.SetField(turn.FieldNum, field.TypeUint, value)
		_node.Num = value
	}
	if nodes := tc.mutation.HandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   turn.HandsTable,
			Columns: turn.HandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hand.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.GamePlayerPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   turn.GamePlayerPointsTable,
			Columns: turn.GamePlayerPointsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameplayerpoint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   turn.EventTable,
			Columns: []string{turn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.GameplayerhandhaiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   turn.GameplayerhandhaiTable,
			Columns: []string{turn.GameplayerhandhaiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameplayerhandhai.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Turn.Create().
//		SetNum(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TurnUpsert) {
//			SetNum(v+v).
//		}).
//		Exec(ctx)
func (tc *TurnCreate) OnConflict(opts ...sql.ConflictOption) *TurnUpsertOne {
	tc.conflict = opts
	return &TurnUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Turn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TurnCreate) OnConflictColumns(columns ...string) *TurnUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TurnUpsertOne{
		create: tc,
	}
}

type (
	// TurnUpsertOne is the builder for "upsert"-ing
	//  one Turn node.
	TurnUpsertOne struct {
		create *TurnCreate
	}

	// TurnUpsert is the "OnConflict" setter.
	TurnUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Turn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(turn.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TurnUpsertOne) UpdateNewValues() *TurnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(turn.FieldID)
		}
		if _, exists := u.create.mutation.Num(); exists {
			s.SetIgnore(turn.FieldNum)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Turn.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TurnUpsertOne) Ignore() *TurnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TurnUpsertOne) DoNothing() *TurnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TurnCreate.OnConflict
// documentation for more info.
func (u *TurnUpsertOne) Update(set func(*TurnUpsert)) *TurnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TurnUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *TurnUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TurnCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TurnUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TurnUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TurnUpsertOne.ID is not supported by MySQL driver. Use TurnUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TurnUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TurnCreateBulk is the builder for creating many Turn entities in bulk.
type TurnCreateBulk struct {
	config
	builders []*TurnCreate
	conflict []sql.ConflictOption
}

// Save creates the Turn entities in the database.
func (tcb *TurnCreateBulk) Save(ctx context.Context) ([]*Turn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Turn, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TurnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TurnCreateBulk) SaveX(ctx context.Context) []*Turn {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TurnCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TurnCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Turn.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TurnUpsert) {
//			SetNum(v+v).
//		}).
//		Exec(ctx)
func (tcb *TurnCreateBulk) OnConflict(opts ...sql.ConflictOption) *TurnUpsertBulk {
	tcb.conflict = opts
	return &TurnUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Turn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TurnCreateBulk) OnConflictColumns(columns ...string) *TurnUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TurnUpsertBulk{
		create: tcb,
	}
}

// TurnUpsertBulk is the builder for "upsert"-ing
// a bulk of Turn nodes.
type TurnUpsertBulk struct {
	create *TurnCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Turn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(turn.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TurnUpsertBulk) UpdateNewValues() *TurnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(turn.FieldID)
			}
			if _, exists := b.mutation.Num(); exists {
				s.SetIgnore(turn.FieldNum)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Turn.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TurnUpsertBulk) Ignore() *TurnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TurnUpsertBulk) DoNothing() *TurnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TurnCreateBulk.OnConflict
// documentation for more info.
func (u *TurnUpsertBulk) Update(set func(*TurnUpsert)) *TurnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TurnUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *TurnUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TurnCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TurnCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TurnUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
