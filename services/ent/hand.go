// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/hand"
)

// Hand is the model entity for the Hand schema.
type Hand struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hand.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hand", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hand fields.
func (h *Hand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hand.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Hand.
// Note that you need to call Hand.Unwrap() before calling this method if this Hand
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hand) Update() *HandUpdateOne {
	return (&HandClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hand) Unwrap() *Hand {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hand is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hand) String() string {
	var builder strings.Builder
	builder.WriteString("Hand(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Hands is a parsable slice of Hand.
type Hands []*Hand

func (h Hands) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
