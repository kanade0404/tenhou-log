// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// GamePlayerHandHai is the model entity for the GamePlayerHandHai schema.
type GamePlayerHandHai struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Hais holds the value of the "hais" field.
	Hais []int `json:"hais,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GamePlayerHandHaiQuery when eager-loading is set.
	Edges                  GamePlayerHandHaiEdges `json:"edges"`
	turn_gameplayerhandhai *uuid.UUID
}

// GamePlayerHandHaiEdges holds the relations/edges for other nodes in the graph.
type GamePlayerHandHaiEdges struct {
	// Turn holds the value of the turn edge.
	Turn *Turn `json:"turn,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TurnOrErr returns the Turn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GamePlayerHandHaiEdges) TurnOrErr() (*Turn, error) {
	if e.loadedTypes[0] {
		if e.Turn == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: turn.Label}
		}
		return e.Turn, nil
	}
	return nil, &NotLoadedError{edge: "turn"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GamePlayerHandHai) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameplayerhandhai.FieldHais:
			values[i] = new([]byte)
		case gameplayerhandhai.FieldID:
			values[i] = new(uuid.UUID)
		case gameplayerhandhai.ForeignKeys[0]: // turn_gameplayerhandhai
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type GamePlayerHandHai", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GamePlayerHandHai fields.
func (gphh *GamePlayerHandHai) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameplayerhandhai.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gphh.ID = *value
			}
		case gameplayerhandhai.FieldHais:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hais", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gphh.Hais); err != nil {
					return fmt.Errorf("unmarshal field hais: %w", err)
				}
			}
		case gameplayerhandhai.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field turn_gameplayerhandhai", values[i])
			} else if value.Valid {
				gphh.turn_gameplayerhandhai = new(uuid.UUID)
				*gphh.turn_gameplayerhandhai = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTurn queries the "turn" edge of the GamePlayerHandHai entity.
func (gphh *GamePlayerHandHai) QueryTurn() *TurnQuery {
	return NewGamePlayerHandHaiClient(gphh.config).QueryTurn(gphh)
}

// Update returns a builder for updating this GamePlayerHandHai.
// Note that you need to call GamePlayerHandHai.Unwrap() before calling this method if this GamePlayerHandHai
// was returned from a transaction, and the transaction was committed or rolled back.
func (gphh *GamePlayerHandHai) Update() *GamePlayerHandHaiUpdateOne {
	return NewGamePlayerHandHaiClient(gphh.config).UpdateOne(gphh)
}

// Unwrap unwraps the GamePlayerHandHai entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gphh *GamePlayerHandHai) Unwrap() *GamePlayerHandHai {
	_tx, ok := gphh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GamePlayerHandHai is not a transactional entity")
	}
	gphh.config.driver = _tx.drv
	return gphh
}

// String implements the fmt.Stringer.
func (gphh *GamePlayerHandHai) String() string {
	var builder strings.Builder
	builder.WriteString("GamePlayerHandHai(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gphh.ID))
	builder.WriteString("hais=")
	builder.WriteString(fmt.Sprintf("%v", gphh.Hais))
	builder.WriteByte(')')
	return builder.String()
}

// GamePlayerHandHais is a parsable slice of GamePlayerHandHai.
type GamePlayerHandHais []*GamePlayerHandHai
