// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/chakan"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ChakanUpdate is the builder for updating Chakan entities.
type ChakanUpdate struct {
	config
	hooks    []Hook
	mutation *ChakanMutation
}

// Where appends a list predicates to the ChakanUpdate builder.
func (cu *ChakanUpdate) Where(ps ...predicate.Chakan) *ChakanUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (cu *ChakanUpdate) SetCallID(id uuid.UUID) *ChakanUpdate {
	cu.mutation.SetCallID(id)
	return cu
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (cu *ChakanUpdate) SetNillableCallID(id *uuid.UUID) *ChakanUpdate {
	if id != nil {
		cu = cu.SetCallID(*id)
	}
	return cu
}

// SetCall sets the "call" edge to the Call entity.
func (cu *ChakanUpdate) SetCall(c *Call) *ChakanUpdate {
	return cu.SetCallID(c.ID)
}

// Mutation returns the ChakanMutation object of the builder.
func (cu *ChakanUpdate) Mutation() *ChakanMutation {
	return cu.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (cu *ChakanUpdate) ClearCall() *ChakanUpdate {
	cu.mutation.ClearCall()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChakanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChakanMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChakanUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChakanUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChakanUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChakanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chakan.Table,
			Columns: chakan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chakan.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chakan.CallTable,
			Columns: []string{chakan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chakan.CallTable,
			Columns: []string{chakan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chakan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChakanUpdateOne is the builder for updating a single Chakan entity.
type ChakanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChakanMutation
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (cuo *ChakanUpdateOne) SetCallID(id uuid.UUID) *ChakanUpdateOne {
	cuo.mutation.SetCallID(id)
	return cuo
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (cuo *ChakanUpdateOne) SetNillableCallID(id *uuid.UUID) *ChakanUpdateOne {
	if id != nil {
		cuo = cuo.SetCallID(*id)
	}
	return cuo
}

// SetCall sets the "call" edge to the Call entity.
func (cuo *ChakanUpdateOne) SetCall(c *Call) *ChakanUpdateOne {
	return cuo.SetCallID(c.ID)
}

// Mutation returns the ChakanMutation object of the builder.
func (cuo *ChakanUpdateOne) Mutation() *ChakanMutation {
	return cuo.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (cuo *ChakanUpdateOne) ClearCall() *ChakanUpdateOne {
	cuo.mutation.ClearCall()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChakanUpdateOne) Select(field string, fields ...string) *ChakanUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chakan entity.
func (cuo *ChakanUpdateOne) Save(ctx context.Context) (*Chakan, error) {
	return withHooks[*Chakan, ChakanMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChakanUpdateOne) SaveX(ctx context.Context) *Chakan {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChakanUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChakanUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChakanUpdateOne) sqlSave(ctx context.Context) (_node *Chakan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chakan.Table,
			Columns: chakan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chakan.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chakan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chakan.FieldID)
		for _, f := range fields {
			if !chakan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chakan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chakan.CallTable,
			Columns: []string{chakan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chakan.CallTable,
			Columns: []string{chakan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chakan{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chakan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
