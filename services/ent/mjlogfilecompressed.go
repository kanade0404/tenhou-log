// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfilecompressed"
)

// MJLogFileCompressed is the model entity for the MJLogFileCompressed schema.
type MJLogFileCompressed struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MJLogFileCompressedQuery when eager-loading is set.
	Edges MJLogFileCompressedEdges `json:"edges"`
}

// MJLogFileCompressedEdges holds the relations/edges for other nodes in the graph.
type MJLogFileCompressedEdges struct {
	// CompressedMjlogFiles holds the value of the compressed_mjlog_files edge.
	CompressedMjlogFiles *CompressedMJLog `json:"compressed_mjlog_files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CompressedMjlogFilesOrErr returns the CompressedMjlogFiles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MJLogFileCompressedEdges) CompressedMjlogFilesOrErr() (*CompressedMJLog, error) {
	if e.loadedTypes[0] {
		if e.CompressedMjlogFiles == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: compressedmjlog.Label}
		}
		return e.CompressedMjlogFiles, nil
	}
	return nil, &NotLoadedError{edge: "compressed_mjlog_files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MJLogFileCompressed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mjlogfilecompressed.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MJLogFileCompressed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MJLogFileCompressed fields.
func (mlfc *MJLogFileCompressed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mjlogfilecompressed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mlfc.ID = *value
			}
		}
	}
	return nil
}

// QueryCompressedMjlogFiles queries the "compressed_mjlog_files" edge of the MJLogFileCompressed entity.
func (mlfc *MJLogFileCompressed) QueryCompressedMjlogFiles() *CompressedMJLogQuery {
	return (&MJLogFileCompressedClient{config: mlfc.config}).QueryCompressedMjlogFiles(mlfc)
}

// Update returns a builder for updating this MJLogFileCompressed.
// Note that you need to call MJLogFileCompressed.Unwrap() before calling this method if this MJLogFileCompressed
// was returned from a transaction, and the transaction was committed or rolled back.
func (mlfc *MJLogFileCompressed) Update() *MJLogFileCompressedUpdateOne {
	return (&MJLogFileCompressedClient{config: mlfc.config}).UpdateOne(mlfc)
}

// Unwrap unwraps the MJLogFileCompressed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mlfc *MJLogFileCompressed) Unwrap() *MJLogFileCompressed {
	_tx, ok := mlfc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MJLogFileCompressed is not a transactional entity")
	}
	mlfc.config.driver = _tx.drv
	return mlfc
}

// String implements the fmt.Stringer.
func (mlfc *MJLogFileCompressed) String() string {
	var builder strings.Builder
	builder.WriteString("MJLogFileCompressed(")
	builder.WriteString(fmt.Sprintf("id=%v", mlfc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// MJLogFileCompresseds is a parsable slice of MJLogFileCompressed.
type MJLogFileCompresseds []*MJLogFileCompressed

func (mlfc MJLogFileCompresseds) config(cfg config) {
	for _i := range mlfc {
		mlfc[_i].config = cfg
	}
}
