// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/concealedkan"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ConcealedKanUpdate is the builder for updating ConcealedKan entities.
type ConcealedKanUpdate struct {
	config
	hooks    []Hook
	mutation *ConcealedKanMutation
}

// Where appends a list predicates to the ConcealedKanUpdate builder.
func (cku *ConcealedKanUpdate) Where(ps ...predicate.ConcealedKan) *ConcealedKanUpdate {
	cku.mutation.Where(ps...)
	return cku
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (cku *ConcealedKanUpdate) SetCallID(id uuid.UUID) *ConcealedKanUpdate {
	cku.mutation.SetCallID(id)
	return cku
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (cku *ConcealedKanUpdate) SetNillableCallID(id *uuid.UUID) *ConcealedKanUpdate {
	if id != nil {
		cku = cku.SetCallID(*id)
	}
	return cku
}

// SetCall sets the "call" edge to the Call entity.
func (cku *ConcealedKanUpdate) SetCall(c *Call) *ConcealedKanUpdate {
	return cku.SetCallID(c.ID)
}

// Mutation returns the ConcealedKanMutation object of the builder.
func (cku *ConcealedKanUpdate) Mutation() *ConcealedKanMutation {
	return cku.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (cku *ConcealedKanUpdate) ClearCall() *ConcealedKanUpdate {
	cku.mutation.ClearCall()
	return cku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cku *ConcealedKanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ConcealedKanMutation](ctx, cku.sqlSave, cku.mutation, cku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cku *ConcealedKanUpdate) SaveX(ctx context.Context) int {
	affected, err := cku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cku *ConcealedKanUpdate) Exec(ctx context.Context) error {
	_, err := cku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cku *ConcealedKanUpdate) ExecX(ctx context.Context) {
	if err := cku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cku *ConcealedKanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concealedkan.Table,
			Columns: concealedkan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: concealedkan.FieldID,
			},
		},
	}
	if ps := cku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cku.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   concealedkan.CallTable,
			Columns: []string{concealedkan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cku.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   concealedkan.CallTable,
			Columns: []string{concealedkan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concealedkan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cku.mutation.done = true
	return n, nil
}

// ConcealedKanUpdateOne is the builder for updating a single ConcealedKan entity.
type ConcealedKanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcealedKanMutation
}

// SetCallID sets the "call" edge to the Call entity by ID.
func (ckuo *ConcealedKanUpdateOne) SetCallID(id uuid.UUID) *ConcealedKanUpdateOne {
	ckuo.mutation.SetCallID(id)
	return ckuo
}

// SetNillableCallID sets the "call" edge to the Call entity by ID if the given value is not nil.
func (ckuo *ConcealedKanUpdateOne) SetNillableCallID(id *uuid.UUID) *ConcealedKanUpdateOne {
	if id != nil {
		ckuo = ckuo.SetCallID(*id)
	}
	return ckuo
}

// SetCall sets the "call" edge to the Call entity.
func (ckuo *ConcealedKanUpdateOne) SetCall(c *Call) *ConcealedKanUpdateOne {
	return ckuo.SetCallID(c.ID)
}

// Mutation returns the ConcealedKanMutation object of the builder.
func (ckuo *ConcealedKanUpdateOne) Mutation() *ConcealedKanMutation {
	return ckuo.mutation
}

// ClearCall clears the "call" edge to the Call entity.
func (ckuo *ConcealedKanUpdateOne) ClearCall() *ConcealedKanUpdateOne {
	ckuo.mutation.ClearCall()
	return ckuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ckuo *ConcealedKanUpdateOne) Select(field string, fields ...string) *ConcealedKanUpdateOne {
	ckuo.fields = append([]string{field}, fields...)
	return ckuo
}

// Save executes the query and returns the updated ConcealedKan entity.
func (ckuo *ConcealedKanUpdateOne) Save(ctx context.Context) (*ConcealedKan, error) {
	return withHooks[*ConcealedKan, ConcealedKanMutation](ctx, ckuo.sqlSave, ckuo.mutation, ckuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ckuo *ConcealedKanUpdateOne) SaveX(ctx context.Context) *ConcealedKan {
	node, err := ckuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ckuo *ConcealedKanUpdateOne) Exec(ctx context.Context) error {
	_, err := ckuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ckuo *ConcealedKanUpdateOne) ExecX(ctx context.Context) {
	if err := ckuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ckuo *ConcealedKanUpdateOne) sqlSave(ctx context.Context) (_node *ConcealedKan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concealedkan.Table,
			Columns: concealedkan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: concealedkan.FieldID,
			},
		},
	}
	id, ok := ckuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConcealedKan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ckuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concealedkan.FieldID)
		for _, f := range fields {
			if !concealedkan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != concealedkan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ckuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ckuo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   concealedkan.CallTable,
			Columns: []string{concealedkan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ckuo.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   concealedkan.CallTable,
			Columns: []string{concealedkan.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: call.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConcealedKan{config: ckuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ckuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concealedkan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ckuo.mutation.done = true
	return _node, nil
}
