// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/event"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerpoint"
	"github.com/kanade0404/tenhou-log/services/ent/hand"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// TurnQuery is the builder for querying Turn entities.
type TurnQuery struct {
	config
	limit                 *int
	offset                *int
	unique                *bool
	order                 []OrderFunc
	fields                []string
	inters                []Interceptor
	predicates            []predicate.Turn
	withHands             *HandQuery
	withGamePlayerPoints  *GamePlayerPointQuery
	withEvent             *EventQuery
	withGameplayerhandhai *GamePlayerHandHaiQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TurnQuery builder.
func (tq *TurnQuery) Where(ps ...predicate.Turn) *TurnQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TurnQuery) Limit(limit int) *TurnQuery {
	tq.limit = &limit
	return tq
}

// Offset to start from.
func (tq *TurnQuery) Offset(offset int) *TurnQuery {
	tq.offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TurnQuery) Unique(unique bool) *TurnQuery {
	tq.unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TurnQuery) Order(o ...OrderFunc) *TurnQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryHands chains the current query on the "hands" edge.
func (tq *TurnQuery) QueryHands() *HandQuery {
	query := (&HandClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(turn.Table, turn.FieldID, selector),
			sqlgraph.To(hand.Table, hand.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, turn.HandsTable, turn.HandsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGamePlayerPoints chains the current query on the "game_player_points" edge.
func (tq *TurnQuery) QueryGamePlayerPoints() *GamePlayerPointQuery {
	query := (&GamePlayerPointClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(turn.Table, turn.FieldID, selector),
			sqlgraph.To(gameplayerpoint.Table, gameplayerpoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, turn.GamePlayerPointsTable, turn.GamePlayerPointsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvent chains the current query on the "event" edge.
func (tq *TurnQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(turn.Table, turn.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, turn.EventTable, turn.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameplayerhandhai chains the current query on the "gameplayerhandhai" edge.
func (tq *TurnQuery) QueryGameplayerhandhai() *GamePlayerHandHaiQuery {
	query := (&GamePlayerHandHaiClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(turn.Table, turn.FieldID, selector),
			sqlgraph.To(gameplayerhandhai.Table, gameplayerhandhai.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, turn.GameplayerhandhaiTable, turn.GameplayerhandhaiColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Turn entity from the query.
// Returns a *NotFoundError when no Turn was found.
func (tq *TurnQuery) First(ctx context.Context) (*Turn, error) {
	nodes, err := tq.Limit(1).All(newQueryContext(ctx, TypeTurn, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{turn.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TurnQuery) FirstX(ctx context.Context) *Turn {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Turn ID from the query.
// Returns a *NotFoundError when no Turn ID was found.
func (tq *TurnQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(1).IDs(newQueryContext(ctx, TypeTurn, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{turn.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TurnQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Turn entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Turn entity is found.
// Returns a *NotFoundError when no Turn entities are found.
func (tq *TurnQuery) Only(ctx context.Context) (*Turn, error) {
	nodes, err := tq.Limit(2).All(newQueryContext(ctx, TypeTurn, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{turn.Label}
	default:
		return nil, &NotSingularError{turn.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TurnQuery) OnlyX(ctx context.Context) *Turn {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Turn ID in the query.
// Returns a *NotSingularError when more than one Turn ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TurnQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(2).IDs(newQueryContext(ctx, TypeTurn, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{turn.Label}
	default:
		err = &NotSingularError{turn.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TurnQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Turns.
func (tq *TurnQuery) All(ctx context.Context) ([]*Turn, error) {
	ctx = newQueryContext(ctx, TypeTurn, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Turn, *TurnQuery]()
	return withInterceptors[[]*Turn](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TurnQuery) AllX(ctx context.Context) []*Turn {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Turn IDs.
func (tq *TurnQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = newQueryContext(ctx, TypeTurn, "IDs")
	if err := tq.Select(turn.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TurnQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TurnQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeTurn, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TurnQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TurnQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TurnQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeTurn, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TurnQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TurnQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TurnQuery) Clone() *TurnQuery {
	if tq == nil {
		return nil
	}
	return &TurnQuery{
		config:                tq.config,
		limit:                 tq.limit,
		offset:                tq.offset,
		order:                 append([]OrderFunc{}, tq.order...),
		inters:                append([]Interceptor{}, tq.inters...),
		predicates:            append([]predicate.Turn{}, tq.predicates...),
		withHands:             tq.withHands.Clone(),
		withGamePlayerPoints:  tq.withGamePlayerPoints.Clone(),
		withEvent:             tq.withEvent.Clone(),
		withGameplayerhandhai: tq.withGameplayerhandhai.Clone(),
		// clone intermediate query.
		sql:    tq.sql.Clone(),
		path:   tq.path,
		unique: tq.unique,
	}
}

// WithHands tells the query-builder to eager-load the nodes that are connected to
// the "hands" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TurnQuery) WithHands(opts ...func(*HandQuery)) *TurnQuery {
	query := (&HandClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withHands = query
	return tq
}

// WithGamePlayerPoints tells the query-builder to eager-load the nodes that are connected to
// the "game_player_points" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TurnQuery) WithGamePlayerPoints(opts ...func(*GamePlayerPointQuery)) *TurnQuery {
	query := (&GamePlayerPointClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withGamePlayerPoints = query
	return tq
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TurnQuery) WithEvent(opts ...func(*EventQuery)) *TurnQuery {
	query := (&EventClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withEvent = query
	return tq
}

// WithGameplayerhandhai tells the query-builder to eager-load the nodes that are connected to
// the "gameplayerhandhai" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TurnQuery) WithGameplayerhandhai(opts ...func(*GamePlayerHandHaiQuery)) *TurnQuery {
	query := (&GamePlayerHandHaiClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withGameplayerhandhai = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Num uint `json:"num,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Turn.Query().
//		GroupBy(turn.FieldNum).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TurnQuery) GroupBy(field string, fields ...string) *TurnGroupBy {
	tq.fields = append([]string{field}, fields...)
	grbuild := &TurnGroupBy{build: tq}
	grbuild.flds = &tq.fields
	grbuild.label = turn.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Num uint `json:"num,omitempty"`
//	}
//
//	client.Turn.Query().
//		Select(turn.FieldNum).
//		Scan(ctx, &v)
func (tq *TurnQuery) Select(fields ...string) *TurnSelect {
	tq.fields = append(tq.fields, fields...)
	sbuild := &TurnSelect{TurnQuery: tq}
	sbuild.label = turn.Label
	sbuild.flds, sbuild.scan = &tq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TurnSelect configured with the given aggregations.
func (tq *TurnQuery) Aggregate(fns ...AggregateFunc) *TurnSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TurnQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.fields {
		if !turn.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TurnQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Turn, error) {
	var (
		nodes       = []*Turn{}
		_spec       = tq.querySpec()
		loadedTypes = [4]bool{
			tq.withHands != nil,
			tq.withGamePlayerPoints != nil,
			tq.withEvent != nil,
			tq.withGameplayerhandhai != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Turn).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Turn{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withHands; query != nil {
		if err := tq.loadHands(ctx, query, nodes,
			func(n *Turn) { n.Edges.Hands = []*Hand{} },
			func(n *Turn, e *Hand) { n.Edges.Hands = append(n.Edges.Hands, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withGamePlayerPoints; query != nil {
		if err := tq.loadGamePlayerPoints(ctx, query, nodes,
			func(n *Turn) { n.Edges.GamePlayerPoints = []*GamePlayerPoint{} },
			func(n *Turn, e *GamePlayerPoint) { n.Edges.GamePlayerPoints = append(n.Edges.GamePlayerPoints, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withEvent; query != nil {
		if err := tq.loadEvent(ctx, query, nodes, nil,
			func(n *Turn, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withGameplayerhandhai; query != nil {
		if err := tq.loadGameplayerhandhai(ctx, query, nodes, nil,
			func(n *Turn, e *GamePlayerHandHai) { n.Edges.Gameplayerhandhai = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TurnQuery) loadHands(ctx context.Context, query *HandQuery, nodes []*Turn, init func(*Turn), assign func(*Turn, *Hand)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Turn)
	nids := make(map[uuid.UUID]map[*Turn]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(turn.HandsTable)
		s.Join(joinT).On(s.C(hand.FieldID), joinT.C(turn.HandsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(turn.HandsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(turn.HandsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Turn]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "hands" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TurnQuery) loadGamePlayerPoints(ctx context.Context, query *GamePlayerPointQuery, nodes []*Turn, init func(*Turn), assign func(*Turn, *GamePlayerPoint)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Turn)
	nids := make(map[uuid.UUID]map[*Turn]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(turn.GamePlayerPointsTable)
		s.Join(joinT).On(s.C(gameplayerpoint.FieldID), joinT.C(turn.GamePlayerPointsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(turn.GamePlayerPointsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(turn.GamePlayerPointsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Turn]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "game_player_points" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TurnQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*Turn, init func(*Turn), assign func(*Turn, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Turn)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(turn.EventColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.turn_event
		if fk == nil {
			return fmt.Errorf(`foreign-key "turn_event" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "turn_event" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TurnQuery) loadGameplayerhandhai(ctx context.Context, query *GamePlayerHandHaiQuery, nodes []*Turn, init func(*Turn), assign func(*Turn, *GamePlayerHandHai)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Turn)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.GamePlayerHandHai(func(s *sql.Selector) {
		s.Where(sql.InValues(turn.GameplayerhandhaiColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.turn_gameplayerhandhai
		if fk == nil {
			return fmt.Errorf(`foreign-key "turn_gameplayerhandhai" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "turn_gameplayerhandhai" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tq *TurnQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.fields
	if len(tq.fields) > 0 {
		_spec.Unique = tq.unique != nil && *tq.unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TurnQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   turn.Table,
			Columns: turn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: turn.FieldID,
			},
		},
		From:   tq.sql,
		Unique: true,
	}
	if unique := tq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, turn.FieldID)
		for i := range fields {
			if fields[i] != turn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TurnQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(turn.Table)
	columns := tq.fields
	if len(columns) == 0 {
		columns = turn.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.unique != nil && *tq.unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TurnGroupBy is the group-by builder for Turn entities.
type TurnGroupBy struct {
	selector
	build *TurnQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TurnGroupBy) Aggregate(fns ...AggregateFunc) *TurnGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TurnGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTurn, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TurnQuery, *TurnGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TurnGroupBy) sqlScan(ctx context.Context, root *TurnQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TurnSelect is the builder for selecting fields of Turn entities.
type TurnSelect struct {
	*TurnQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TurnSelect) Aggregate(fns ...AggregateFunc) *TurnSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TurnSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTurn, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TurnQuery, *TurnSelect](ctx, ts.TurnQuery, ts, ts.inters, v)
}

func (ts *TurnSelect) sqlScan(ctx context.Context, root *TurnQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
