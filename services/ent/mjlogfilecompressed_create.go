// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/compressedmjlog"
	"github.com/kanade0404/tenhou-log/services/ent/mjlogfilecompressed"
)

// MJLogFileCompressedCreate is the builder for creating a MJLogFileCompressed entity.
type MJLogFileCompressedCreate struct {
	config
	mutation *MJLogFileCompressedMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (mlfcc *MJLogFileCompressedCreate) SetID(u uuid.UUID) *MJLogFileCompressedCreate {
	mlfcc.mutation.SetID(u)
	return mlfcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlfcc *MJLogFileCompressedCreate) SetNillableID(u *uuid.UUID) *MJLogFileCompressedCreate {
	if u != nil {
		mlfcc.SetID(*u)
	}
	return mlfcc
}

// SetCompressedMjlogFilesID sets the "compressed_mjlog_files" edge to the CompressedMJLog entity by ID.
func (mlfcc *MJLogFileCompressedCreate) SetCompressedMjlogFilesID(id uuid.UUID) *MJLogFileCompressedCreate {
	mlfcc.mutation.SetCompressedMjlogFilesID(id)
	return mlfcc
}

// SetNillableCompressedMjlogFilesID sets the "compressed_mjlog_files" edge to the CompressedMJLog entity by ID if the given value is not nil.
func (mlfcc *MJLogFileCompressedCreate) SetNillableCompressedMjlogFilesID(id *uuid.UUID) *MJLogFileCompressedCreate {
	if id != nil {
		mlfcc = mlfcc.SetCompressedMjlogFilesID(*id)
	}
	return mlfcc
}

// SetCompressedMjlogFiles sets the "compressed_mjlog_files" edge to the CompressedMJLog entity.
func (mlfcc *MJLogFileCompressedCreate) SetCompressedMjlogFiles(c *CompressedMJLog) *MJLogFileCompressedCreate {
	return mlfcc.SetCompressedMjlogFilesID(c.ID)
}

// Mutation returns the MJLogFileCompressedMutation object of the builder.
func (mlfcc *MJLogFileCompressedCreate) Mutation() *MJLogFileCompressedMutation {
	return mlfcc.mutation
}

// Save creates the MJLogFileCompressed in the database.
func (mlfcc *MJLogFileCompressedCreate) Save(ctx context.Context) (*MJLogFileCompressed, error) {
	var (
		err  error
		node *MJLogFileCompressed
	)
	mlfcc.defaults()
	if len(mlfcc.hooks) == 0 {
		if err = mlfcc.check(); err != nil {
			return nil, err
		}
		node, err = mlfcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MJLogFileCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mlfcc.check(); err != nil {
				return nil, err
			}
			mlfcc.mutation = mutation
			if node, err = mlfcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mlfcc.hooks) - 1; i >= 0; i-- {
			if mlfcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlfcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mlfcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MJLogFileCompressed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MJLogFileCompressedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mlfcc *MJLogFileCompressedCreate) SaveX(ctx context.Context) *MJLogFileCompressed {
	v, err := mlfcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlfcc *MJLogFileCompressedCreate) Exec(ctx context.Context) error {
	_, err := mlfcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfcc *MJLogFileCompressedCreate) ExecX(ctx context.Context) {
	if err := mlfcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlfcc *MJLogFileCompressedCreate) defaults() {
	if _, ok := mlfcc.mutation.ID(); !ok {
		v := mjlogfilecompressed.DefaultID()
		mlfcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlfcc *MJLogFileCompressedCreate) check() error {
	return nil
}

func (mlfcc *MJLogFileCompressedCreate) sqlSave(ctx context.Context) (*MJLogFileCompressed, error) {
	_node, _spec := mlfcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlfcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mlfcc *MJLogFileCompressedCreate) createSpec() (*MJLogFileCompressed, *sqlgraph.CreateSpec) {
	var (
		_node = &MJLogFileCompressed{config: mlfcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mjlogfilecompressed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mjlogfilecompressed.FieldID,
			},
		}
	)
	if id, ok := mlfcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := mlfcc.mutation.CompressedMjlogFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mjlogfilecompressed.CompressedMjlogFilesTable,
			Columns: []string{mjlogfilecompressed.CompressedMjlogFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: compressedmjlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MJLogFileCompressedCreateBulk is the builder for creating many MJLogFileCompressed entities in bulk.
type MJLogFileCompressedCreateBulk struct {
	config
	builders []*MJLogFileCompressedCreate
}

// Save creates the MJLogFileCompressed entities in the database.
func (mlfccb *MJLogFileCompressedCreateBulk) Save(ctx context.Context) ([]*MJLogFileCompressed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mlfccb.builders))
	nodes := make([]*MJLogFileCompressed, len(mlfccb.builders))
	mutators := make([]Mutator, len(mlfccb.builders))
	for i := range mlfccb.builders {
		func(i int, root context.Context) {
			builder := mlfccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MJLogFileCompressedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlfccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlfccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlfccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlfccb *MJLogFileCompressedCreateBulk) SaveX(ctx context.Context) []*MJLogFileCompressed {
	v, err := mlfccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlfccb *MJLogFileCompressedCreateBulk) Exec(ctx context.Context) error {
	_, err := mlfccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlfccb *MJLogFileCompressedCreateBulk) ExecX(ctx context.Context) {
	if err := mlfccb.Exec(ctx); err != nil {
		panic(err)
	}
}
