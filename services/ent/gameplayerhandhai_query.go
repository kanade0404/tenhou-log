// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerhandhai"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// GamePlayerHandHaiQuery is the builder for querying GamePlayerHandHai entities.
type GamePlayerHandHaiQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.GamePlayerHandHai
	withTurn   *TurnQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GamePlayerHandHaiQuery builder.
func (gphhq *GamePlayerHandHaiQuery) Where(ps ...predicate.GamePlayerHandHai) *GamePlayerHandHaiQuery {
	gphhq.predicates = append(gphhq.predicates, ps...)
	return gphhq
}

// Limit the number of records to be returned by this query.
func (gphhq *GamePlayerHandHaiQuery) Limit(limit int) *GamePlayerHandHaiQuery {
	gphhq.ctx.Limit = &limit
	return gphhq
}

// Offset to start from.
func (gphhq *GamePlayerHandHaiQuery) Offset(offset int) *GamePlayerHandHaiQuery {
	gphhq.ctx.Offset = &offset
	return gphhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gphhq *GamePlayerHandHaiQuery) Unique(unique bool) *GamePlayerHandHaiQuery {
	gphhq.ctx.Unique = &unique
	return gphhq
}

// Order specifies how the records should be ordered.
func (gphhq *GamePlayerHandHaiQuery) Order(o ...OrderFunc) *GamePlayerHandHaiQuery {
	gphhq.order = append(gphhq.order, o...)
	return gphhq
}

// QueryTurn chains the current query on the "turn" edge.
func (gphhq *GamePlayerHandHaiQuery) QueryTurn() *TurnQuery {
	query := (&TurnClient{config: gphhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gphhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gphhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameplayerhandhai.Table, gameplayerhandhai.FieldID, selector),
			sqlgraph.To(turn.Table, turn.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gameplayerhandhai.TurnTable, gameplayerhandhai.TurnColumn),
		)
		fromU = sqlgraph.SetNeighbors(gphhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GamePlayerHandHai entity from the query.
// Returns a *NotFoundError when no GamePlayerHandHai was found.
func (gphhq *GamePlayerHandHaiQuery) First(ctx context.Context) (*GamePlayerHandHai, error) {
	nodes, err := gphhq.Limit(1).All(setContextOp(ctx, gphhq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameplayerhandhai.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) FirstX(ctx context.Context) *GamePlayerHandHai {
	node, err := gphhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GamePlayerHandHai ID from the query.
// Returns a *NotFoundError when no GamePlayerHandHai ID was found.
func (gphhq *GamePlayerHandHaiQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gphhq.Limit(1).IDs(setContextOp(ctx, gphhq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gameplayerhandhai.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gphhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GamePlayerHandHai entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GamePlayerHandHai entity is found.
// Returns a *NotFoundError when no GamePlayerHandHai entities are found.
func (gphhq *GamePlayerHandHaiQuery) Only(ctx context.Context) (*GamePlayerHandHai, error) {
	nodes, err := gphhq.Limit(2).All(setContextOp(ctx, gphhq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameplayerhandhai.Label}
	default:
		return nil, &NotSingularError{gameplayerhandhai.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) OnlyX(ctx context.Context) *GamePlayerHandHai {
	node, err := gphhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GamePlayerHandHai ID in the query.
// Returns a *NotSingularError when more than one GamePlayerHandHai ID is found.
// Returns a *NotFoundError when no entities are found.
func (gphhq *GamePlayerHandHaiQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gphhq.Limit(2).IDs(setContextOp(ctx, gphhq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameplayerhandhai.Label}
	default:
		err = &NotSingularError{gameplayerhandhai.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gphhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GamePlayerHandHais.
func (gphhq *GamePlayerHandHaiQuery) All(ctx context.Context) ([]*GamePlayerHandHai, error) {
	ctx = setContextOp(ctx, gphhq.ctx, "All")
	if err := gphhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GamePlayerHandHai, *GamePlayerHandHaiQuery]()
	return withInterceptors[[]*GamePlayerHandHai](ctx, gphhq, qr, gphhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) AllX(ctx context.Context) []*GamePlayerHandHai {
	nodes, err := gphhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GamePlayerHandHai IDs.
func (gphhq *GamePlayerHandHaiQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if gphhq.ctx.Unique == nil && gphhq.path != nil {
		gphhq.Unique(true)
	}
	ctx = setContextOp(ctx, gphhq.ctx, "IDs")
	if err = gphhq.Select(gameplayerhandhai.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gphhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gphhq *GamePlayerHandHaiQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gphhq.ctx, "Count")
	if err := gphhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gphhq, querierCount[*GamePlayerHandHaiQuery](), gphhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) CountX(ctx context.Context) int {
	count, err := gphhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gphhq *GamePlayerHandHaiQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gphhq.ctx, "Exist")
	switch _, err := gphhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gphhq *GamePlayerHandHaiQuery) ExistX(ctx context.Context) bool {
	exist, err := gphhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GamePlayerHandHaiQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gphhq *GamePlayerHandHaiQuery) Clone() *GamePlayerHandHaiQuery {
	if gphhq == nil {
		return nil
	}
	return &GamePlayerHandHaiQuery{
		config:     gphhq.config,
		ctx:        gphhq.ctx.Clone(),
		order:      append([]OrderFunc{}, gphhq.order...),
		inters:     append([]Interceptor{}, gphhq.inters...),
		predicates: append([]predicate.GamePlayerHandHai{}, gphhq.predicates...),
		withTurn:   gphhq.withTurn.Clone(),
		// clone intermediate query.
		sql:  gphhq.sql.Clone(),
		path: gphhq.path,
	}
}

// WithTurn tells the query-builder to eager-load the nodes that are connected to
// the "turn" edge. The optional arguments are used to configure the query builder of the edge.
func (gphhq *GamePlayerHandHaiQuery) WithTurn(opts ...func(*TurnQuery)) *GamePlayerHandHaiQuery {
	query := (&TurnClient{config: gphhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gphhq.withTurn = query
	return gphhq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Hais []int `json:"hais,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GamePlayerHandHai.Query().
//		GroupBy(gameplayerhandhai.FieldHais).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gphhq *GamePlayerHandHaiQuery) GroupBy(field string, fields ...string) *GamePlayerHandHaiGroupBy {
	gphhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GamePlayerHandHaiGroupBy{build: gphhq}
	grbuild.flds = &gphhq.ctx.Fields
	grbuild.label = gameplayerhandhai.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Hais []int `json:"hais,omitempty"`
//	}
//
//	client.GamePlayerHandHai.Query().
//		Select(gameplayerhandhai.FieldHais).
//		Scan(ctx, &v)
func (gphhq *GamePlayerHandHaiQuery) Select(fields ...string) *GamePlayerHandHaiSelect {
	gphhq.ctx.Fields = append(gphhq.ctx.Fields, fields...)
	sbuild := &GamePlayerHandHaiSelect{GamePlayerHandHaiQuery: gphhq}
	sbuild.label = gameplayerhandhai.Label
	sbuild.flds, sbuild.scan = &gphhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GamePlayerHandHaiSelect configured with the given aggregations.
func (gphhq *GamePlayerHandHaiQuery) Aggregate(fns ...AggregateFunc) *GamePlayerHandHaiSelect {
	return gphhq.Select().Aggregate(fns...)
}

func (gphhq *GamePlayerHandHaiQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gphhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gphhq); err != nil {
				return err
			}
		}
	}
	for _, f := range gphhq.ctx.Fields {
		if !gameplayerhandhai.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gphhq.path != nil {
		prev, err := gphhq.path(ctx)
		if err != nil {
			return err
		}
		gphhq.sql = prev
	}
	return nil
}

func (gphhq *GamePlayerHandHaiQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GamePlayerHandHai, error) {
	var (
		nodes       = []*GamePlayerHandHai{}
		withFKs     = gphhq.withFKs
		_spec       = gphhq.querySpec()
		loadedTypes = [1]bool{
			gphhq.withTurn != nil,
		}
	)
	if gphhq.withTurn != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayerhandhai.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GamePlayerHandHai).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GamePlayerHandHai{config: gphhq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gphhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gphhq.withTurn; query != nil {
		if err := gphhq.loadTurn(ctx, query, nodes, nil,
			func(n *GamePlayerHandHai, e *Turn) { n.Edges.Turn = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gphhq *GamePlayerHandHaiQuery) loadTurn(ctx context.Context, query *TurnQuery, nodes []*GamePlayerHandHai, init func(*GamePlayerHandHai), assign func(*GamePlayerHandHai, *Turn)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GamePlayerHandHai)
	for i := range nodes {
		if nodes[i].turn_gameplayerhandhai == nil {
			continue
		}
		fk := *nodes[i].turn_gameplayerhandhai
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(turn.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "turn_gameplayerhandhai" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gphhq *GamePlayerHandHaiQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gphhq.querySpec()
	_spec.Node.Columns = gphhq.ctx.Fields
	if len(gphhq.ctx.Fields) > 0 {
		_spec.Unique = gphhq.ctx.Unique != nil && *gphhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gphhq.driver, _spec)
}

func (gphhq *GamePlayerHandHaiQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gameplayerhandhai.Table, gameplayerhandhai.Columns, sqlgraph.NewFieldSpec(gameplayerhandhai.FieldID, field.TypeUUID))
	_spec.From = gphhq.sql
	if unique := gphhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gphhq.path != nil {
		_spec.Unique = true
	}
	if fields := gphhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayerhandhai.FieldID)
		for i := range fields {
			if fields[i] != gameplayerhandhai.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gphhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gphhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gphhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gphhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gphhq *GamePlayerHandHaiQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gphhq.driver.Dialect())
	t1 := builder.Table(gameplayerhandhai.Table)
	columns := gphhq.ctx.Fields
	if len(columns) == 0 {
		columns = gameplayerhandhai.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gphhq.sql != nil {
		selector = gphhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gphhq.ctx.Unique != nil && *gphhq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gphhq.predicates {
		p(selector)
	}
	for _, p := range gphhq.order {
		p(selector)
	}
	if offset := gphhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gphhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GamePlayerHandHaiGroupBy is the group-by builder for GamePlayerHandHai entities.
type GamePlayerHandHaiGroupBy struct {
	selector
	build *GamePlayerHandHaiQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gphhgb *GamePlayerHandHaiGroupBy) Aggregate(fns ...AggregateFunc) *GamePlayerHandHaiGroupBy {
	gphhgb.fns = append(gphhgb.fns, fns...)
	return gphhgb
}

// Scan applies the selector query and scans the result into the given value.
func (gphhgb *GamePlayerHandHaiGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gphhgb.build.ctx, "GroupBy")
	if err := gphhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GamePlayerHandHaiQuery, *GamePlayerHandHaiGroupBy](ctx, gphhgb.build, gphhgb, gphhgb.build.inters, v)
}

func (gphhgb *GamePlayerHandHaiGroupBy) sqlScan(ctx context.Context, root *GamePlayerHandHaiQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gphhgb.fns))
	for _, fn := range gphhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gphhgb.flds)+len(gphhgb.fns))
		for _, f := range *gphhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gphhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gphhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GamePlayerHandHaiSelect is the builder for selecting fields of GamePlayerHandHai entities.
type GamePlayerHandHaiSelect struct {
	*GamePlayerHandHaiQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gphhs *GamePlayerHandHaiSelect) Aggregate(fns ...AggregateFunc) *GamePlayerHandHaiSelect {
	gphhs.fns = append(gphhs.fns, fns...)
	return gphhs
}

// Scan applies the selector query and scans the result into the given value.
func (gphhs *GamePlayerHandHaiSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gphhs.ctx, "Select")
	if err := gphhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GamePlayerHandHaiQuery, *GamePlayerHandHaiSelect](ctx, gphhs.GamePlayerHandHaiQuery, gphhs, gphhs.inters, v)
}

func (gphhs *GamePlayerHandHaiSelect) sqlScan(ctx context.Context, root *GamePlayerHandHaiQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gphhs.fns))
	for _, fn := range gphhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gphhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gphhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
