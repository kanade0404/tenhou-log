// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/hand"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/round"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// HandUpdate is the builder for updating Hand entities.
type HandUpdate struct {
	config
	hooks    []Hook
	mutation *HandMutation
}

// Where appends a list predicates to the HandUpdate builder.
func (hu *HandUpdate) Where(ps ...predicate.Hand) *HandUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (hu *HandUpdate) SetRoundsID(id uuid.UUID) *HandUpdate {
	hu.mutation.SetRoundsID(id)
	return hu
}

// SetNillableRoundsID sets the "rounds" edge to the Round entity by ID if the given value is not nil.
func (hu *HandUpdate) SetNillableRoundsID(id *uuid.UUID) *HandUpdate {
	if id != nil {
		hu = hu.SetRoundsID(*id)
	}
	return hu
}

// SetRounds sets the "rounds" edge to the Round entity.
func (hu *HandUpdate) SetRounds(r *Round) *HandUpdate {
	return hu.SetRoundsID(r.ID)
}

// AddTurnIDs adds the "turns" edge to the Turn entity by IDs.
func (hu *HandUpdate) AddTurnIDs(ids ...uuid.UUID) *HandUpdate {
	hu.mutation.AddTurnIDs(ids...)
	return hu
}

// AddTurns adds the "turns" edges to the Turn entity.
func (hu *HandUpdate) AddTurns(t ...*Turn) *HandUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.AddTurnIDs(ids...)
}

// Mutation returns the HandMutation object of the builder.
func (hu *HandUpdate) Mutation() *HandMutation {
	return hu.mutation
}

// ClearRounds clears the "rounds" edge to the Round entity.
func (hu *HandUpdate) ClearRounds() *HandUpdate {
	hu.mutation.ClearRounds()
	return hu
}

// ClearTurns clears all "turns" edges to the Turn entity.
func (hu *HandUpdate) ClearTurns() *HandUpdate {
	hu.mutation.ClearTurns()
	return hu
}

// RemoveTurnIDs removes the "turns" edge to Turn entities by IDs.
func (hu *HandUpdate) RemoveTurnIDs(ids ...uuid.UUID) *HandUpdate {
	hu.mutation.RemoveTurnIDs(ids...)
	return hu
}

// RemoveTurns removes "turns" edges to Turn entities.
func (hu *HandUpdate) RemoveTurns(t ...*Turn) *HandUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.RemoveTurnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HandMutation](ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HandUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HandUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HandUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hand.Table, hand.Columns, sqlgraph.NewFieldSpec(hand.FieldID, field.TypeUUID))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hand.RoundsTable,
			Columns: []string{hand.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hand.RoundsTable,
			Columns: []string{hand.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedTurnsIDs(); len(nodes) > 0 && !hu.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.TurnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HandUpdateOne is the builder for updating a single Hand entity.
type HandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HandMutation
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (huo *HandUpdateOne) SetRoundsID(id uuid.UUID) *HandUpdateOne {
	huo.mutation.SetRoundsID(id)
	return huo
}

// SetNillableRoundsID sets the "rounds" edge to the Round entity by ID if the given value is not nil.
func (huo *HandUpdateOne) SetNillableRoundsID(id *uuid.UUID) *HandUpdateOne {
	if id != nil {
		huo = huo.SetRoundsID(*id)
	}
	return huo
}

// SetRounds sets the "rounds" edge to the Round entity.
func (huo *HandUpdateOne) SetRounds(r *Round) *HandUpdateOne {
	return huo.SetRoundsID(r.ID)
}

// AddTurnIDs adds the "turns" edge to the Turn entity by IDs.
func (huo *HandUpdateOne) AddTurnIDs(ids ...uuid.UUID) *HandUpdateOne {
	huo.mutation.AddTurnIDs(ids...)
	return huo
}

// AddTurns adds the "turns" edges to the Turn entity.
func (huo *HandUpdateOne) AddTurns(t ...*Turn) *HandUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.AddTurnIDs(ids...)
}

// Mutation returns the HandMutation object of the builder.
func (huo *HandUpdateOne) Mutation() *HandMutation {
	return huo.mutation
}

// ClearRounds clears the "rounds" edge to the Round entity.
func (huo *HandUpdateOne) ClearRounds() *HandUpdateOne {
	huo.mutation.ClearRounds()
	return huo
}

// ClearTurns clears all "turns" edges to the Turn entity.
func (huo *HandUpdateOne) ClearTurns() *HandUpdateOne {
	huo.mutation.ClearTurns()
	return huo
}

// RemoveTurnIDs removes the "turns" edge to Turn entities by IDs.
func (huo *HandUpdateOne) RemoveTurnIDs(ids ...uuid.UUID) *HandUpdateOne {
	huo.mutation.RemoveTurnIDs(ids...)
	return huo
}

// RemoveTurns removes "turns" edges to Turn entities.
func (huo *HandUpdateOne) RemoveTurns(t ...*Turn) *HandUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.RemoveTurnIDs(ids...)
}

// Where appends a list predicates to the HandUpdate builder.
func (huo *HandUpdateOne) Where(ps ...predicate.Hand) *HandUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HandUpdateOne) Select(field string, fields ...string) *HandUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hand entity.
func (huo *HandUpdateOne) Save(ctx context.Context) (*Hand, error) {
	return withHooks[*Hand, HandMutation](ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HandUpdateOne) SaveX(ctx context.Context) *Hand {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HandUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HandUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HandUpdateOne) sqlSave(ctx context.Context) (_node *Hand, err error) {
	_spec := sqlgraph.NewUpdateSpec(hand.Table, hand.Columns, sqlgraph.NewFieldSpec(hand.FieldID, field.TypeUUID))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hand.FieldID)
		for _, f := range fields {
			if !hand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if huo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hand.RoundsTable,
			Columns: []string{hand.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hand.RoundsTable,
			Columns: []string{hand.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedTurnsIDs(); len(nodes) > 0 && !huo.mutation.TurnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.TurnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hand.TurnsTable,
			Columns: hand.TurnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(turn.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hand{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
