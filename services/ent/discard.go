// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/discard"
	"github.com/kanade0404/tenhou-log/services/ent/drawn"
	"github.com/kanade0404/tenhou-log/services/ent/reach"
)

// Discard is the model entity for the Discard schema.
type Discard struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscardQuery when eager-loading is set.
	Edges DiscardEdges `json:"edges"`
}

// DiscardEdges holds the relations/edges for other nodes in the graph.
type DiscardEdges struct {
	// Reach holds the value of the reach edge.
	Reach *Reach `json:"reach,omitempty"`
	// Call holds the value of the call edge.
	Call *Call `json:"call,omitempty"`
	// Draw holds the value of the draw edge.
	Draw *Drawn `json:"draw,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReachOrErr returns the Reach value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscardEdges) ReachOrErr() (*Reach, error) {
	if e.loadedTypes[0] {
		if e.Reach == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reach.Label}
		}
		return e.Reach, nil
	}
	return nil, &NotLoadedError{edge: "reach"}
}

// CallOrErr returns the Call value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscardEdges) CallOrErr() (*Call, error) {
	if e.loadedTypes[1] {
		if e.Call == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: call.Label}
		}
		return e.Call, nil
	}
	return nil, &NotLoadedError{edge: "call"}
}

// DrawOrErr returns the Draw value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscardEdges) DrawOrErr() (*Drawn, error) {
	if e.loadedTypes[2] {
		if e.Draw == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: drawn.Label}
		}
		return e.Draw, nil
	}
	return nil, &NotLoadedError{edge: "draw"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Discard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discard.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Discard", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Discard fields.
func (d *Discard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discard.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		}
	}
	return nil
}

// QueryReach queries the "reach" edge of the Discard entity.
func (d *Discard) QueryReach() *ReachQuery {
	return NewDiscardClient(d.config).QueryReach(d)
}

// QueryCall queries the "call" edge of the Discard entity.
func (d *Discard) QueryCall() *CallQuery {
	return NewDiscardClient(d.config).QueryCall(d)
}

// QueryDraw queries the "draw" edge of the Discard entity.
func (d *Discard) QueryDraw() *DrawnQuery {
	return NewDiscardClient(d.config).QueryDraw(d)
}

// Update returns a builder for updating this Discard.
// Note that you need to call Discard.Unwrap() before calling this method if this Discard
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Discard) Update() *DiscardUpdateOne {
	return NewDiscardClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Discard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Discard) Unwrap() *Discard {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Discard is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Discard) String() string {
	var builder strings.Builder
	builder.WriteString("Discard(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Discards is a parsable slice of Discard.
type Discards []*Discard
