// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/dan"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayer"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// DanUpdate is the builder for updating Dan entities.
type DanUpdate struct {
	config
	hooks    []Hook
	mutation *DanMutation
}

// Where appends a list predicates to the DanUpdate builder.
func (du *DanUpdate) Where(ps ...predicate.Dan) *DanUpdate {
	du.mutation.Where(ps...)
	return du
}

// AddGamePlayerIDs adds the "game_players" edge to the GamePlayer entity by IDs.
func (du *DanUpdate) AddGamePlayerIDs(ids ...uuid.UUID) *DanUpdate {
	du.mutation.AddGamePlayerIDs(ids...)
	return du
}

// AddGamePlayers adds the "game_players" edges to the GamePlayer entity.
func (du *DanUpdate) AddGamePlayers(g ...*GamePlayer) *DanUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.AddGamePlayerIDs(ids...)
}

// Mutation returns the DanMutation object of the builder.
func (du *DanUpdate) Mutation() *DanMutation {
	return du.mutation
}

// ClearGamePlayers clears all "game_players" edges to the GamePlayer entity.
func (du *DanUpdate) ClearGamePlayers() *DanUpdate {
	du.mutation.ClearGamePlayers()
	return du
}

// RemoveGamePlayerIDs removes the "game_players" edge to GamePlayer entities by IDs.
func (du *DanUpdate) RemoveGamePlayerIDs(ids ...uuid.UUID) *DanUpdate {
	du.mutation.RemoveGamePlayerIDs(ids...)
	return du
}

// RemoveGamePlayers removes "game_players" edges to GamePlayer entities.
func (du *DanUpdate) RemoveGamePlayers(g ...*GamePlayer) *DanUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.RemoveGamePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DanMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DanUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DanUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DanUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dan.Table,
			Columns: dan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dan.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedGamePlayersIDs(); len(nodes) > 0 && !du.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GamePlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DanUpdateOne is the builder for updating a single Dan entity.
type DanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DanMutation
}

// AddGamePlayerIDs adds the "game_players" edge to the GamePlayer entity by IDs.
func (duo *DanUpdateOne) AddGamePlayerIDs(ids ...uuid.UUID) *DanUpdateOne {
	duo.mutation.AddGamePlayerIDs(ids...)
	return duo
}

// AddGamePlayers adds the "game_players" edges to the GamePlayer entity.
func (duo *DanUpdateOne) AddGamePlayers(g ...*GamePlayer) *DanUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.AddGamePlayerIDs(ids...)
}

// Mutation returns the DanMutation object of the builder.
func (duo *DanUpdateOne) Mutation() *DanMutation {
	return duo.mutation
}

// ClearGamePlayers clears all "game_players" edges to the GamePlayer entity.
func (duo *DanUpdateOne) ClearGamePlayers() *DanUpdateOne {
	duo.mutation.ClearGamePlayers()
	return duo
}

// RemoveGamePlayerIDs removes the "game_players" edge to GamePlayer entities by IDs.
func (duo *DanUpdateOne) RemoveGamePlayerIDs(ids ...uuid.UUID) *DanUpdateOne {
	duo.mutation.RemoveGamePlayerIDs(ids...)
	return duo
}

// RemoveGamePlayers removes "game_players" edges to GamePlayer entities.
func (duo *DanUpdateOne) RemoveGamePlayers(g ...*GamePlayer) *DanUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.RemoveGamePlayerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DanUpdateOne) Select(field string, fields ...string) *DanUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dan entity.
func (duo *DanUpdateOne) Save(ctx context.Context) (*Dan, error) {
	return withHooks[*Dan, DanMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DanUpdateOne) SaveX(ctx context.Context) *Dan {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DanUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DanUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DanUpdateOne) sqlSave(ctx context.Context) (_node *Dan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dan.Table,
			Columns: dan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dan.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dan.FieldID)
		for _, f := range fields {
			if !dan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedGamePlayersIDs(); len(nodes) > 0 && !duo.mutation.GamePlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GamePlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dan.GamePlayersTable,
			Columns: []string{dan.GamePlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: gameplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dan{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
