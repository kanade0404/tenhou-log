// Code generated by ent, DO NOT EDIT.

package gameplayerpoint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldLTE(FieldID, id))
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldEQ(FieldPoint, v))
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldEQ(FieldPoint, v))
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldNEQ(FieldPoint, v))
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldIn(FieldPoint, vs...))
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldNotIn(FieldPoint, vs...))
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldGT(FieldPoint, v))
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldGTE(FieldPoint, v))
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldLT(FieldPoint, v))
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v uint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(sql.FieldLTE(FieldPoint, v))
}

// HasTurns applies the HasEdge predicate on the "turns" edge.
func HasTurns() predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TurnsTable, TurnsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTurnsWith applies the HasEdge predicate on the "turns" edge with a given conditions (other predicates).
func HasTurnsWith(preds ...predicate.Turn) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TurnsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TurnsTable, TurnsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GamePlayerPoint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GamePlayerPoint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GamePlayerPoint) predicate.GamePlayerPoint {
	return predicate.GamePlayerPoint(func(s *sql.Selector) {
		p(s.Not())
	})
}
