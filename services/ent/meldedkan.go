// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/call"
	"github.com/kanade0404/tenhou-log/services/ent/meldedkan"
)

// MeldedKan is the model entity for the MeldedKan schema.
type MeldedKan struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeldedKanQuery when eager-loading is set.
	Edges MeldedKanEdges `json:"edges"`
}

// MeldedKanEdges holds the relations/edges for other nodes in the graph.
type MeldedKanEdges struct {
	// Call holds the value of the call edge.
	Call *Call `json:"call,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CallOrErr returns the Call value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeldedKanEdges) CallOrErr() (*Call, error) {
	if e.loadedTypes[0] {
		if e.Call == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: call.Label}
		}
		return e.Call, nil
	}
	return nil, &NotLoadedError{edge: "call"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MeldedKan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meldedkan.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MeldedKan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MeldedKan fields.
func (mk *MeldedKan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meldedkan.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mk.ID = *value
			}
		}
	}
	return nil
}

// QueryCall queries the "call" edge of the MeldedKan entity.
func (mk *MeldedKan) QueryCall() *CallQuery {
	return (&MeldedKanClient{config: mk.config}).QueryCall(mk)
}

// Update returns a builder for updating this MeldedKan.
// Note that you need to call MeldedKan.Unwrap() before calling this method if this MeldedKan
// was returned from a transaction, and the transaction was committed or rolled back.
func (mk *MeldedKan) Update() *MeldedKanUpdateOne {
	return (&MeldedKanClient{config: mk.config}).UpdateOne(mk)
}

// Unwrap unwraps the MeldedKan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mk *MeldedKan) Unwrap() *MeldedKan {
	_tx, ok := mk.config.driver.(*txDriver)
	if !ok {
		panic("ent: MeldedKan is not a transactional entity")
	}
	mk.config.driver = _tx.drv
	return mk
}

// String implements the fmt.Stringer.
func (mk *MeldedKan) String() string {
	var builder strings.Builder
	builder.WriteString("MeldedKan(")
	builder.WriteString(fmt.Sprintf("id=%v", mk.ID))
	builder.WriteByte(')')
	return builder.String()
}

// MeldedKans is a parsable slice of MeldedKan.
type MeldedKans []*MeldedKan

func (mk MeldedKans) config(cfg config) {
	for _i := range mk {
		mk[_i].config = cfg
	}
}
