// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kanade0404/tenhou-log/services/ent/gameplayerpoint"
	"github.com/kanade0404/tenhou-log/services/ent/predicate"
	"github.com/kanade0404/tenhou-log/services/ent/turn"
)

// GamePlayerPointQuery is the builder for querying GamePlayerPoint entities.
type GamePlayerPointQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GamePlayerPoint
	withTurns  *TurnQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GamePlayerPointQuery builder.
func (gppq *GamePlayerPointQuery) Where(ps ...predicate.GamePlayerPoint) *GamePlayerPointQuery {
	gppq.predicates = append(gppq.predicates, ps...)
	return gppq
}

// Limit adds a limit step to the query.
func (gppq *GamePlayerPointQuery) Limit(limit int) *GamePlayerPointQuery {
	gppq.limit = &limit
	return gppq
}

// Offset adds an offset step to the query.
func (gppq *GamePlayerPointQuery) Offset(offset int) *GamePlayerPointQuery {
	gppq.offset = &offset
	return gppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gppq *GamePlayerPointQuery) Unique(unique bool) *GamePlayerPointQuery {
	gppq.unique = &unique
	return gppq
}

// Order adds an order step to the query.
func (gppq *GamePlayerPointQuery) Order(o ...OrderFunc) *GamePlayerPointQuery {
	gppq.order = append(gppq.order, o...)
	return gppq
}

// QueryTurns chains the current query on the "turns" edge.
func (gppq *GamePlayerPointQuery) QueryTurns() *TurnQuery {
	query := &TurnQuery{config: gppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameplayerpoint.Table, gameplayerpoint.FieldID, selector),
			sqlgraph.To(turn.Table, turn.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, gameplayerpoint.TurnsTable, gameplayerpoint.TurnsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GamePlayerPoint entity from the query.
// Returns a *NotFoundError when no GamePlayerPoint was found.
func (gppq *GamePlayerPointQuery) First(ctx context.Context) (*GamePlayerPoint, error) {
	nodes, err := gppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameplayerpoint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) FirstX(ctx context.Context) *GamePlayerPoint {
	node, err := gppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GamePlayerPoint ID from the query.
// Returns a *NotFoundError when no GamePlayerPoint ID was found.
func (gppq *GamePlayerPointQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gameplayerpoint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GamePlayerPoint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GamePlayerPoint entity is found.
// Returns a *NotFoundError when no GamePlayerPoint entities are found.
func (gppq *GamePlayerPointQuery) Only(ctx context.Context) (*GamePlayerPoint, error) {
	nodes, err := gppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameplayerpoint.Label}
	default:
		return nil, &NotSingularError{gameplayerpoint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) OnlyX(ctx context.Context) *GamePlayerPoint {
	node, err := gppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GamePlayerPoint ID in the query.
// Returns a *NotSingularError when more than one GamePlayerPoint ID is found.
// Returns a *NotFoundError when no entities are found.
func (gppq *GamePlayerPointQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameplayerpoint.Label}
	default:
		err = &NotSingularError{gameplayerpoint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GamePlayerPoints.
func (gppq *GamePlayerPointQuery) All(ctx context.Context) ([]*GamePlayerPoint, error) {
	if err := gppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) AllX(ctx context.Context) []*GamePlayerPoint {
	nodes, err := gppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GamePlayerPoint IDs.
func (gppq *GamePlayerPointQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := gppq.Select(gameplayerpoint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gppq *GamePlayerPointQuery) Count(ctx context.Context) (int, error) {
	if err := gppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) CountX(ctx context.Context) int {
	count, err := gppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gppq *GamePlayerPointQuery) Exist(ctx context.Context) (bool, error) {
	if err := gppq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gppq *GamePlayerPointQuery) ExistX(ctx context.Context) bool {
	exist, err := gppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GamePlayerPointQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gppq *GamePlayerPointQuery) Clone() *GamePlayerPointQuery {
	if gppq == nil {
		return nil
	}
	return &GamePlayerPointQuery{
		config:     gppq.config,
		limit:      gppq.limit,
		offset:     gppq.offset,
		order:      append([]OrderFunc{}, gppq.order...),
		predicates: append([]predicate.GamePlayerPoint{}, gppq.predicates...),
		withTurns:  gppq.withTurns.Clone(),
		// clone intermediate query.
		sql:    gppq.sql.Clone(),
		path:   gppq.path,
		unique: gppq.unique,
	}
}

// WithTurns tells the query-builder to eager-load the nodes that are connected to
// the "turns" edge. The optional arguments are used to configure the query builder of the edge.
func (gppq *GamePlayerPointQuery) WithTurns(opts ...func(*TurnQuery)) *GamePlayerPointQuery {
	query := &TurnQuery{config: gppq.config}
	for _, opt := range opts {
		opt(query)
	}
	gppq.withTurns = query
	return gppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Point uint `json:"point,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GamePlayerPoint.Query().
//		GroupBy(gameplayerpoint.FieldPoint).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gppq *GamePlayerPointQuery) GroupBy(field string, fields ...string) *GamePlayerPointGroupBy {
	grbuild := &GamePlayerPointGroupBy{config: gppq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gppq.sqlQuery(ctx), nil
	}
	grbuild.label = gameplayerpoint.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Point uint `json:"point,omitempty"`
//	}
//
//	client.GamePlayerPoint.Query().
//		Select(gameplayerpoint.FieldPoint).
//		Scan(ctx, &v)
//
func (gppq *GamePlayerPointQuery) Select(fields ...string) *GamePlayerPointSelect {
	gppq.fields = append(gppq.fields, fields...)
	selbuild := &GamePlayerPointSelect{GamePlayerPointQuery: gppq}
	selbuild.label = gameplayerpoint.Label
	selbuild.flds, selbuild.scan = &gppq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GamePlayerPointSelect configured with the given aggregations.
func (gppq *GamePlayerPointQuery) Aggregate(fns ...AggregateFunc) *GamePlayerPointSelect {
	return gppq.Select().Aggregate(fns...)
}

func (gppq *GamePlayerPointQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gppq.fields {
		if !gameplayerpoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gppq.path != nil {
		prev, err := gppq.path(ctx)
		if err != nil {
			return err
		}
		gppq.sql = prev
	}
	return nil
}

func (gppq *GamePlayerPointQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GamePlayerPoint, error) {
	var (
		nodes       = []*GamePlayerPoint{}
		_spec       = gppq.querySpec()
		loadedTypes = [1]bool{
			gppq.withTurns != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GamePlayerPoint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GamePlayerPoint{config: gppq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gppq.withTurns; query != nil {
		if err := gppq.loadTurns(ctx, query, nodes,
			func(n *GamePlayerPoint) { n.Edges.Turns = []*Turn{} },
			func(n *GamePlayerPoint, e *Turn) { n.Edges.Turns = append(n.Edges.Turns, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gppq *GamePlayerPointQuery) loadTurns(ctx context.Context, query *TurnQuery, nodes []*GamePlayerPoint, init func(*GamePlayerPoint), assign func(*GamePlayerPoint, *Turn)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*GamePlayerPoint)
	nids := make(map[uuid.UUID]map[*GamePlayerPoint]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(gameplayerpoint.TurnsTable)
		s.Join(joinT).On(s.C(turn.FieldID), joinT.C(gameplayerpoint.TurnsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(gameplayerpoint.TurnsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(gameplayerpoint.TurnsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*GamePlayerPoint]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "turns" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (gppq *GamePlayerPointQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gppq.querySpec()
	_spec.Node.Columns = gppq.fields
	if len(gppq.fields) > 0 {
		_spec.Unique = gppq.unique != nil && *gppq.unique
	}
	return sqlgraph.CountNodes(ctx, gppq.driver, _spec)
}

func (gppq *GamePlayerPointQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gppq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gppq *GamePlayerPointQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameplayerpoint.Table,
			Columns: gameplayerpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: gameplayerpoint.FieldID,
			},
		},
		From:   gppq.sql,
		Unique: true,
	}
	if unique := gppq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gppq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayerpoint.FieldID)
		for i := range fields {
			if fields[i] != gameplayerpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gppq *GamePlayerPointQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gppq.driver.Dialect())
	t1 := builder.Table(gameplayerpoint.Table)
	columns := gppq.fields
	if len(columns) == 0 {
		columns = gameplayerpoint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gppq.sql != nil {
		selector = gppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gppq.unique != nil && *gppq.unique {
		selector.Distinct()
	}
	for _, p := range gppq.predicates {
		p(selector)
	}
	for _, p := range gppq.order {
		p(selector)
	}
	if offset := gppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GamePlayerPointGroupBy is the group-by builder for GamePlayerPoint entities.
type GamePlayerPointGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gppgb *GamePlayerPointGroupBy) Aggregate(fns ...AggregateFunc) *GamePlayerPointGroupBy {
	gppgb.fns = append(gppgb.fns, fns...)
	return gppgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gppgb *GamePlayerPointGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gppgb.path(ctx)
	if err != nil {
		return err
	}
	gppgb.sql = query
	return gppgb.sqlScan(ctx, v)
}

func (gppgb *GamePlayerPointGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gppgb.fields {
		if !gameplayerpoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gppgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gppgb *GamePlayerPointGroupBy) sqlQuery() *sql.Selector {
	selector := gppgb.sql.Select()
	aggregation := make([]string, 0, len(gppgb.fns))
	for _, fn := range gppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gppgb.fields)+len(gppgb.fns))
		for _, f := range gppgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gppgb.fields...)...)
}

// GamePlayerPointSelect is the builder for selecting fields of GamePlayerPoint entities.
type GamePlayerPointSelect struct {
	*GamePlayerPointQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gpps *GamePlayerPointSelect) Aggregate(fns ...AggregateFunc) *GamePlayerPointSelect {
	gpps.fns = append(gpps.fns, fns...)
	return gpps
}

// Scan applies the selector query and scans the result into the given value.
func (gpps *GamePlayerPointSelect) Scan(ctx context.Context, v any) error {
	if err := gpps.prepareQuery(ctx); err != nil {
		return err
	}
	gpps.sql = gpps.GamePlayerPointQuery.sqlQuery(ctx)
	return gpps.sqlScan(ctx, v)
}

func (gpps *GamePlayerPointSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gpps.fns))
	for _, fn := range gpps.fns {
		aggregation = append(aggregation, fn(gpps.sql))
	}
	switch n := len(*gpps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gpps.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gpps.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gpps.sql.Query()
	if err := gpps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
